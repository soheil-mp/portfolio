{"ast":null,"code":"/**\n * marked v16.0.0 - a markdown parser\n * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction M() {\n  return {\n    async: !1,\n    breaks: !1,\n    extensions: null,\n    gfm: !0,\n    hooks: null,\n    pedantic: !1,\n    renderer: null,\n    silent: !1,\n    tokenizer: null,\n    walkTokens: null\n  };\n}\nvar w = M();\nfunction H(a) {\n  w = a;\n}\nvar C = {\n  exec: () => null\n};\nfunction h(a) {\n  let e = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"\";\n  let t = typeof a == \"string\" ? a : a.source,\n    n = {\n      replace: (s, i) => {\n        let r = typeof i == \"string\" ? i : i.source;\n        return r = r.replace(m.caret, \"$1\"), t = t.replace(s, r), n;\n      },\n      getRegex: () => new RegExp(t, e)\n    };\n  return n;\n}\nvar m = {\n    codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n    outputLinkReplace: /\\\\([\\[\\]])/g,\n    indentCodeCompensation: /^(\\s+)(?:```)/,\n    beginningSpace: /^\\s+/,\n    endingHash: /#$/,\n    startingSpaceChar: /^ /,\n    endingSpaceChar: / $/,\n    nonSpaceChar: /[^ ]/,\n    newLineCharGlobal: /\\n/g,\n    tabCharGlobal: /\\t/g,\n    multipleSpaceGlobal: /\\s+/g,\n    blankLine: /^[ \\t]*$/,\n    doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n    blockquoteStart: /^ {0,3}>/,\n    blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n    blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n    listReplaceTabs: /^\\t+/,\n    listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n    listIsTask: /^\\[[ xX]\\] /,\n    listReplaceTask: /^\\[[ xX]\\] +/,\n    anyLine: /\\n.*\\n/,\n    hrefBrackets: /^<(.*)>$/,\n    tableDelimiter: /[:|]/,\n    tableAlignChars: /^\\||\\| *$/g,\n    tableRowBlankLine: /\\n[ \\t]*$/,\n    tableAlignRight: /^ *-+: *$/,\n    tableAlignCenter: /^ *:-+: *$/,\n    tableAlignLeft: /^ *:-+ *$/,\n    startATag: /^<a /i,\n    endATag: /^<\\/a>/i,\n    startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n    endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n    startAngleBracket: /^</,\n    endAngleBracket: />$/,\n    pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n    unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n    escapeTest: /[&<>\"']/,\n    escapeReplace: /[&<>\"']/g,\n    escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n    escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n    unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n    caret: /(^|[^\\[])\\^/g,\n    percentDecode: /%25/g,\n    findPipe: /\\|/g,\n    splitPipe: / \\|/,\n    slashPipe: /\\\\\\|/g,\n    carriageReturn: /\\r\\n|\\r/g,\n    spaceLine: /^ +$/gm,\n    notSpaceStart: /^\\S*/,\n    endingNewline: /\\n$/,\n    listItemRegex: a => new RegExp(`^( {0,3}${a})((?:[\t ][^\\\\n]*)?(?:\\\\n|$))`),\n    nextBulletRegex: a => new RegExp(`^ {0,${Math.min(3, a - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \t][^\\\\n]*)?(?:\\\\n|$))`),\n    hrRegex: a => new RegExp(`^ {0,${Math.min(3, a - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n    fencesBeginRegex: a => new RegExp(`^ {0,${Math.min(3, a - 1)}}(?:\\`\\`\\`|~~~)`),\n    headingBeginRegex: a => new RegExp(`^ {0,${Math.min(3, a - 1)}}#`),\n    htmlBeginRegex: a => new RegExp(`^ {0,${Math.min(3, a - 1)}}<(?:[a-z].*>|!--)`, \"i\")\n  },\n  xe = /^(?:[ \\t]*(?:\\n|$))+/,\n  be = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/,\n  Te = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  I = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  we = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  j = /(?:[*+-]|\\d{1,9}[.)])/,\n  re = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  ie = h(re).replace(/bull/g, j).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/\\|table/g, \"\").getRegex(),\n  ye = h(re).replace(/bull/g, j).replace(/blockCode/g, /(?: {4}| {0,3}\\t)/).replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g, / {0,3}>/).replace(/heading/g, / {0,3}#{1,6}/).replace(/html/g, / {0,3}<[^\\n>]+>\\n/).replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/).getRegex(),\n  F = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  Re = /^[^\\n]+/,\n  Q = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/,\n  Se = h(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/).replace(\"label\", Q).replace(\"title\", /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/).getRegex(),\n  $e = h(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/).replace(/bull/g, j).getRegex(),\n  v = \"address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul\",\n  U = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/,\n  _e = h(\"^ {0,3}(?:<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)|comment[^\\\\n]*(\\\\n+|$)|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$)|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \t]*)+\\\\n|$))\", \"i\").replace(\"comment\", U).replace(\"tag\", v).replace(\"attribute\", / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/).getRegex(),\n  oe = h(F).replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex(),\n  Le = h(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/).replace(\"paragraph\", oe).getRegex(),\n  K = {\n    blockquote: Le,\n    code: be,\n    def: Se,\n    fences: Te,\n    heading: we,\n    hr: I,\n    html: _e,\n    lheading: ie,\n    list: $e,\n    newline: xe,\n    paragraph: oe,\n    table: C,\n    text: Re\n  },\n  se = h(\"^ *([^\\\\n ].*)\\\\n {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)\").replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"blockquote\", \" {0,3}>\").replace(\"code\", \"(?: {4}| {0,3}\t)[^\\\\n]\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex(),\n  ze = {\n    ...K,\n    lheading: ye,\n    table: se,\n    paragraph: h(F).replace(\"hr\", I).replace(\"heading\", \" {0,3}#{1,6}(?:\\\\s|$)\").replace(\"|lheading\", \"\").replace(\"table\", se).replace(\"blockquote\", \" {0,3}>\").replace(\"fences\", \" {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n\").replace(\"list\", \" {0,3}(?:[*+-]|1[.)]) \").replace(\"html\", \"</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)\").replace(\"tag\", v).getRegex()\n  },\n  Me = {\n    ...K,\n    html: h(`^ *(?:comment *(?:\\\\n|\\\\s*$)|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\\\s[^'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))`).replace(\"comment\", U).replace(/tag/g, \"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b\").getRegex(),\n    def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n    heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n    fences: C,\n    lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n    paragraph: h(F).replace(\"hr\", I).replace(\"heading\", ` *#{1,6} *[^\n]`).replace(\"lheading\", ie).replace(\"|table\", \"\").replace(\"blockquote\", \" {0,3}>\").replace(\"|fences\", \"\").replace(\"|list\", \"\").replace(\"|html\", \"\").replace(\"|tag\", \"\").getRegex()\n  },\n  Pe = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  Ae = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  le = /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  Ee = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  D = /[\\p{P}\\p{S}]/u,\n  X = /[\\s\\p{P}\\p{S}]/u,\n  ae = /[^\\s\\p{P}\\p{S}]/u,\n  Ce = h(/^((?![*_])punctSpace)/, \"u\").replace(/punctSpace/g, X).getRegex(),\n  ce = /(?!~)[\\p{P}\\p{S}]/u,\n  Ie = /(?!~)[\\s\\p{P}\\p{S}]/u,\n  Oe = /(?:[^\\s\\p{P}\\p{S}]|~)/u,\n  Be = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g,\n  pe = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/,\n  qe = h(pe, \"u\").replace(/punct/g, D).getRegex(),\n  ve = h(pe, \"u\").replace(/punct/g, ce).getRegex(),\n  ue = \"^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)|notPunctSpace(\\\\*+)(?=notPunctSpace)\",\n  De = h(ue, \"gu\").replace(/notPunctSpace/g, ae).replace(/punctSpace/g, X).replace(/punct/g, D).getRegex(),\n  Ze = h(ue, \"gu\").replace(/notPunctSpace/g, Oe).replace(/punctSpace/g, Ie).replace(/punct/g, ce).getRegex(),\n  Ge = h(\"^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)\", \"gu\").replace(/notPunctSpace/g, ae).replace(/punctSpace/g, X).replace(/punct/g, D).getRegex(),\n  He = h(/\\\\(punct)/, \"gu\").replace(/punct/g, D).getRegex(),\n  Ne = h(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/).replace(\"scheme\", /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace(\"email\", /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),\n  je = h(U).replace(\"(?:-->|$)\", \"-->\").getRegex(),\n  Fe = h(\"^comment|^</[a-zA-Z][\\\\w:-]*\\\\s*>|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>|^<\\\\?[\\\\s\\\\S]*?\\\\?>|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\").replace(\"comment\", je).replace(\"attribute\", /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/).getRegex(),\n  q = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/,\n  Qe = h(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/).replace(\"label\", q).replace(\"href\", /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/).replace(\"title\", /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/).getRegex(),\n  he = h(/^!?\\[(label)\\]\\[(ref)\\]/).replace(\"label\", q).replace(\"ref\", Q).getRegex(),\n  ke = h(/^!?\\[(ref)\\](?:\\[\\])?/).replace(\"ref\", Q).getRegex(),\n  Ue = h(\"reflink|nolink(?!\\\\()\", \"g\").replace(\"reflink\", he).replace(\"nolink\", ke).getRegex(),\n  W = {\n    _backpedal: C,\n    anyPunctuation: He,\n    autolink: Ne,\n    blockSkip: Be,\n    br: le,\n    code: Ae,\n    del: C,\n    emStrongLDelim: qe,\n    emStrongRDelimAst: De,\n    emStrongRDelimUnd: Ge,\n    escape: Pe,\n    link: Qe,\n    nolink: ke,\n    punctuation: Ce,\n    reflink: he,\n    reflinkSearch: Ue,\n    tag: Fe,\n    text: Ee,\n    url: C\n  },\n  Ke = {\n    ...W,\n    link: h(/^!?\\[(label)\\]\\((.*?)\\)/).replace(\"label\", q).getRegex(),\n    reflink: h(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/).replace(\"label\", q).getRegex()\n  },\n  N = {\n    ...W,\n    emStrongRDelimAst: Ze,\n    emStrongLDelim: ve,\n    url: h(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, \"i\").replace(\"email\", /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),\n    _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n    del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n    text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n  },\n  Xe = {\n    ...N,\n    br: h(le).replace(\"{2,}\", \"*\").getRegex(),\n    text: h(N.text).replace(\"\\\\b_\", \"\\\\b_| {2,}\\\\n\").replace(/\\{2,\\}/g, \"*\").getRegex()\n  },\n  O = {\n    normal: K,\n    gfm: ze,\n    pedantic: Me\n  },\n  P = {\n    normal: W,\n    gfm: N,\n    breaks: Xe,\n    pedantic: Ke\n  };\nvar We = {\n    \"&\": \"&amp;\",\n    \"<\": \"&lt;\",\n    \">\": \"&gt;\",\n    '\"': \"&quot;\",\n    \"'\": \"&#39;\"\n  },\n  ge = a => We[a];\nfunction R(a, e) {\n  if (e) {\n    if (m.escapeTest.test(a)) return a.replace(m.escapeReplace, ge);\n  } else if (m.escapeTestNoEncode.test(a)) return a.replace(m.escapeReplaceNoEncode, ge);\n  return a;\n}\nfunction J(a) {\n  try {\n    a = encodeURI(a).replace(m.percentDecode, \"%\");\n  } catch {\n    return null;\n  }\n  return a;\n}\nfunction V(a, e) {\n  let t = a.replace(m.findPipe, (i, r, o) => {\n      let l = !1,\n        c = r;\n      for (; --c >= 0 && o[c] === \"\\\\\";) l = !l;\n      return l ? \"|\" : \" |\";\n    }),\n    n = t.split(m.splitPipe),\n    s = 0;\n  if (n[0].trim() || n.shift(), n.length > 0 && !n.at(-1)?.trim() && n.pop(), e) if (n.length > e) n.splice(e);else for (; n.length < e;) n.push(\"\");\n  for (; s < n.length; s++) n[s] = n[s].trim().replace(m.slashPipe, \"|\");\n  return n;\n}\nfunction A(a, e, t) {\n  let n = a.length;\n  if (n === 0) return \"\";\n  let s = 0;\n  for (; s < n;) {\n    let i = a.charAt(n - s - 1);\n    if (i === e && !t) s++;else if (i !== e && t) s++;else break;\n  }\n  return a.slice(0, n - s);\n}\nfunction fe(a, e) {\n  if (a.indexOf(e[1]) === -1) return -1;\n  let t = 0;\n  for (let n = 0; n < a.length; n++) if (a[n] === \"\\\\\") n++;else if (a[n] === e[0]) t++;else if (a[n] === e[1] && (t--, t < 0)) return n;\n  return t > 0 ? -2 : -1;\n}\nfunction de(a, e, t, n, s) {\n  let i = e.href,\n    r = e.title || null,\n    o = a[1].replace(s.other.outputLinkReplace, \"$1\");\n  n.state.inLink = !0;\n  let l = {\n    type: a[0].charAt(0) === \"!\" ? \"image\" : \"link\",\n    raw: t,\n    href: i,\n    title: r,\n    text: o,\n    tokens: n.inlineTokens(o)\n  };\n  return n.state.inLink = !1, l;\n}\nfunction Je(a, e, t) {\n  let n = a.match(t.other.indentCodeCompensation);\n  if (n === null) return e;\n  let s = n[1];\n  return e.split(`\n`).map(i => {\n    let r = i.match(t.other.beginningSpace);\n    if (r === null) return i;\n    let [o] = r;\n    return o.length >= s.length ? i.slice(s.length) : i;\n  }).join(`\n`);\n}\nvar S = class {\n  options;\n  rules;\n  lexer;\n  constructor(e) {\n    this.options = e || w;\n  }\n  space(e) {\n    let t = this.rules.block.newline.exec(e);\n    if (t && t[0].length > 0) return {\n      type: \"space\",\n      raw: t[0]\n    };\n  }\n  code(e) {\n    let t = this.rules.block.code.exec(e);\n    if (t) {\n      let n = t[0].replace(this.rules.other.codeRemoveIndent, \"\");\n      return {\n        type: \"code\",\n        raw: t[0],\n        codeBlockStyle: \"indented\",\n        text: this.options.pedantic ? n : A(n, `\n`)\n      };\n    }\n  }\n  fences(e) {\n    let t = this.rules.block.fences.exec(e);\n    if (t) {\n      let n = t[0],\n        s = Je(n, t[3] || \"\", this.rules);\n      return {\n        type: \"code\",\n        raw: n,\n        lang: t[2] ? t[2].trim().replace(this.rules.inline.anyPunctuation, \"$1\") : t[2],\n        text: s\n      };\n    }\n  }\n  heading(e) {\n    let t = this.rules.block.heading.exec(e);\n    if (t) {\n      let n = t[2].trim();\n      if (this.rules.other.endingHash.test(n)) {\n        let s = A(n, \"#\");\n        (this.options.pedantic || !s || this.rules.other.endingSpaceChar.test(s)) && (n = s.trim());\n      }\n      return {\n        type: \"heading\",\n        raw: t[0],\n        depth: t[1].length,\n        text: n,\n        tokens: this.lexer.inline(n)\n      };\n    }\n  }\n  hr(e) {\n    let t = this.rules.block.hr.exec(e);\n    if (t) return {\n      type: \"hr\",\n      raw: A(t[0], `\n`)\n    };\n  }\n  blockquote(e) {\n    let t = this.rules.block.blockquote.exec(e);\n    if (t) {\n      let n = A(t[0], `\n`).split(`\n`),\n        s = \"\",\n        i = \"\",\n        r = [];\n      for (; n.length > 0;) {\n        let o = !1,\n          l = [],\n          c;\n        for (c = 0; c < n.length; c++) if (this.rules.other.blockquoteStart.test(n[c])) l.push(n[c]), o = !0;else if (!o) l.push(n[c]);else break;\n        n = n.slice(c);\n        let p = l.join(`\n`),\n          u = p.replace(this.rules.other.blockquoteSetextReplace, `\n    $1`).replace(this.rules.other.blockquoteSetextReplace2, \"\");\n        s = s ? `${s}\n${p}` : p, i = i ? `${i}\n${u}` : u;\n        let d = this.lexer.state.top;\n        if (this.lexer.state.top = !0, this.lexer.blockTokens(u, r, !0), this.lexer.state.top = d, n.length === 0) break;\n        let g = r.at(-1);\n        if (g?.type === \"code\") break;\n        if (g?.type === \"blockquote\") {\n          let x = g,\n            f = x.raw + `\n` + n.join(`\n`),\n            y = this.blockquote(f);\n          r[r.length - 1] = y, s = s.substring(0, s.length - x.raw.length) + y.raw, i = i.substring(0, i.length - x.text.length) + y.text;\n          break;\n        } else if (g?.type === \"list\") {\n          let x = g,\n            f = x.raw + `\n` + n.join(`\n`),\n            y = this.list(f);\n          r[r.length - 1] = y, s = s.substring(0, s.length - g.raw.length) + y.raw, i = i.substring(0, i.length - x.raw.length) + y.raw, n = f.substring(r.at(-1).raw.length).split(`\n`);\n          continue;\n        }\n      }\n      return {\n        type: \"blockquote\",\n        raw: s,\n        tokens: r,\n        text: i\n      };\n    }\n  }\n  list(e) {\n    let t = this.rules.block.list.exec(e);\n    if (t) {\n      let n = t[1].trim(),\n        s = n.length > 1,\n        i = {\n          type: \"list\",\n          raw: \"\",\n          ordered: s,\n          start: s ? +n.slice(0, -1) : \"\",\n          loose: !1,\n          items: []\n        };\n      n = s ? `\\\\d{1,9}\\\\${n.slice(-1)}` : `\\\\${n}`, this.options.pedantic && (n = s ? n : \"[*+-]\");\n      let r = this.rules.other.listItemRegex(n),\n        o = !1;\n      for (; e;) {\n        let c = !1,\n          p = \"\",\n          u = \"\";\n        if (!(t = r.exec(e)) || this.rules.block.hr.test(e)) break;\n        p = t[0], e = e.substring(p.length);\n        let d = t[2].split(`\n`, 1)[0].replace(this.rules.other.listReplaceTabs, Z => \" \".repeat(3 * Z.length)),\n          g = e.split(`\n`, 1)[0],\n          x = !d.trim(),\n          f = 0;\n        if (this.options.pedantic ? (f = 2, u = d.trimStart()) : x ? f = t[1].length + 1 : (f = t[2].search(this.rules.other.nonSpaceChar), f = f > 4 ? 1 : f, u = d.slice(f), f += t[1].length), x && this.rules.other.blankLine.test(g) && (p += g + `\n`, e = e.substring(g.length + 1), c = !0), !c) {\n          let Z = this.rules.other.nextBulletRegex(f),\n            ee = this.rules.other.hrRegex(f),\n            te = this.rules.other.fencesBeginRegex(f),\n            ne = this.rules.other.headingBeginRegex(f),\n            me = this.rules.other.htmlBeginRegex(f);\n          for (; e;) {\n            let G = e.split(`\n`, 1)[0],\n              E;\n            if (g = G, this.options.pedantic ? (g = g.replace(this.rules.other.listReplaceNesting, \"  \"), E = g) : E = g.replace(this.rules.other.tabCharGlobal, \"    \"), te.test(g) || ne.test(g) || me.test(g) || Z.test(g) || ee.test(g)) break;\n            if (E.search(this.rules.other.nonSpaceChar) >= f || !g.trim()) u += `\n` + E.slice(f);else {\n              if (x || d.replace(this.rules.other.tabCharGlobal, \"    \").search(this.rules.other.nonSpaceChar) >= 4 || te.test(d) || ne.test(d) || ee.test(d)) break;\n              u += `\n` + g;\n            }\n            !x && !g.trim() && (x = !0), p += G + `\n`, e = e.substring(G.length + 1), d = E.slice(f);\n          }\n        }\n        i.loose || (o ? i.loose = !0 : this.rules.other.doubleBlankLine.test(p) && (o = !0));\n        let y = null,\n          Y;\n        this.options.gfm && (y = this.rules.other.listIsTask.exec(u), y && (Y = y[0] !== \"[ ] \", u = u.replace(this.rules.other.listReplaceTask, \"\"))), i.items.push({\n          type: \"list_item\",\n          raw: p,\n          task: !!y,\n          checked: Y,\n          loose: !1,\n          text: u,\n          tokens: []\n        }), i.raw += p;\n      }\n      let l = i.items.at(-1);\n      if (l) l.raw = l.raw.trimEnd(), l.text = l.text.trimEnd();else return;\n      i.raw = i.raw.trimEnd();\n      for (let c = 0; c < i.items.length; c++) if (this.lexer.state.top = !1, i.items[c].tokens = this.lexer.blockTokens(i.items[c].text, []), !i.loose) {\n        let p = i.items[c].tokens.filter(d => d.type === \"space\"),\n          u = p.length > 0 && p.some(d => this.rules.other.anyLine.test(d.raw));\n        i.loose = u;\n      }\n      if (i.loose) for (let c = 0; c < i.items.length; c++) i.items[c].loose = !0;\n      return i;\n    }\n  }\n  html(e) {\n    let t = this.rules.block.html.exec(e);\n    if (t) return {\n      type: \"html\",\n      block: !0,\n      raw: t[0],\n      pre: t[1] === \"pre\" || t[1] === \"script\" || t[1] === \"style\",\n      text: t[0]\n    };\n  }\n  def(e) {\n    let t = this.rules.block.def.exec(e);\n    if (t) {\n      let n = t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, \" \"),\n        s = t[2] ? t[2].replace(this.rules.other.hrefBrackets, \"$1\").replace(this.rules.inline.anyPunctuation, \"$1\") : \"\",\n        i = t[3] ? t[3].substring(1, t[3].length - 1).replace(this.rules.inline.anyPunctuation, \"$1\") : t[3];\n      return {\n        type: \"def\",\n        tag: n,\n        raw: t[0],\n        href: s,\n        title: i\n      };\n    }\n  }\n  table(e) {\n    let t = this.rules.block.table.exec(e);\n    if (!t || !this.rules.other.tableDelimiter.test(t[2])) return;\n    let n = V(t[1]),\n      s = t[2].replace(this.rules.other.tableAlignChars, \"\").split(\"|\"),\n      i = t[3]?.trim() ? t[3].replace(this.rules.other.tableRowBlankLine, \"\").split(`\n`) : [],\n      r = {\n        type: \"table\",\n        raw: t[0],\n        header: [],\n        align: [],\n        rows: []\n      };\n    if (n.length === s.length) {\n      for (let o of s) this.rules.other.tableAlignRight.test(o) ? r.align.push(\"right\") : this.rules.other.tableAlignCenter.test(o) ? r.align.push(\"center\") : this.rules.other.tableAlignLeft.test(o) ? r.align.push(\"left\") : r.align.push(null);\n      for (let o = 0; o < n.length; o++) r.header.push({\n        text: n[o],\n        tokens: this.lexer.inline(n[o]),\n        header: !0,\n        align: r.align[o]\n      });\n      for (let o of i) r.rows.push(V(o, r.header.length).map((l, c) => ({\n        text: l,\n        tokens: this.lexer.inline(l),\n        header: !1,\n        align: r.align[c]\n      })));\n      return r;\n    }\n  }\n  lheading(e) {\n    let t = this.rules.block.lheading.exec(e);\n    if (t) return {\n      type: \"heading\",\n      raw: t[0],\n      depth: t[2].charAt(0) === \"=\" ? 1 : 2,\n      text: t[1],\n      tokens: this.lexer.inline(t[1])\n    };\n  }\n  paragraph(e) {\n    let t = this.rules.block.paragraph.exec(e);\n    if (t) {\n      let n = t[1].charAt(t[1].length - 1) === `\n` ? t[1].slice(0, -1) : t[1];\n      return {\n        type: \"paragraph\",\n        raw: t[0],\n        text: n,\n        tokens: this.lexer.inline(n)\n      };\n    }\n  }\n  text(e) {\n    let t = this.rules.block.text.exec(e);\n    if (t) return {\n      type: \"text\",\n      raw: t[0],\n      text: t[0],\n      tokens: this.lexer.inline(t[0])\n    };\n  }\n  escape(e) {\n    let t = this.rules.inline.escape.exec(e);\n    if (t) return {\n      type: \"escape\",\n      raw: t[0],\n      text: t[1]\n    };\n  }\n  tag(e) {\n    let t = this.rules.inline.tag.exec(e);\n    if (t) return !this.lexer.state.inLink && this.rules.other.startATag.test(t[0]) ? this.lexer.state.inLink = !0 : this.lexer.state.inLink && this.rules.other.endATag.test(t[0]) && (this.lexer.state.inLink = !1), !this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(t[0]) ? this.lexer.state.inRawBlock = !0 : this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(t[0]) && (this.lexer.state.inRawBlock = !1), {\n      type: \"html\",\n      raw: t[0],\n      inLink: this.lexer.state.inLink,\n      inRawBlock: this.lexer.state.inRawBlock,\n      block: !1,\n      text: t[0]\n    };\n  }\n  link(e) {\n    let t = this.rules.inline.link.exec(e);\n    if (t) {\n      let n = t[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(n)) {\n        if (!this.rules.other.endAngleBracket.test(n)) return;\n        let r = A(n.slice(0, -1), \"\\\\\");\n        if ((n.length - r.length) % 2 === 0) return;\n      } else {\n        let r = fe(t[2], \"()\");\n        if (r === -2) return;\n        if (r > -1) {\n          let l = (t[0].indexOf(\"!\") === 0 ? 5 : 4) + t[1].length + r;\n          t[2] = t[2].substring(0, r), t[0] = t[0].substring(0, l).trim(), t[3] = \"\";\n        }\n      }\n      let s = t[2],\n        i = \"\";\n      if (this.options.pedantic) {\n        let r = this.rules.other.pedanticHrefTitle.exec(s);\n        r && (s = r[1], i = r[3]);\n      } else i = t[3] ? t[3].slice(1, -1) : \"\";\n      return s = s.trim(), this.rules.other.startAngleBracket.test(s) && (this.options.pedantic && !this.rules.other.endAngleBracket.test(n) ? s = s.slice(1) : s = s.slice(1, -1)), de(t, {\n        href: s && s.replace(this.rules.inline.anyPunctuation, \"$1\"),\n        title: i && i.replace(this.rules.inline.anyPunctuation, \"$1\")\n      }, t[0], this.lexer, this.rules);\n    }\n  }\n  reflink(e, t) {\n    let n;\n    if ((n = this.rules.inline.reflink.exec(e)) || (n = this.rules.inline.nolink.exec(e))) {\n      let s = (n[2] || n[1]).replace(this.rules.other.multipleSpaceGlobal, \" \"),\n        i = t[s.toLowerCase()];\n      if (!i) {\n        let r = n[0].charAt(0);\n        return {\n          type: \"text\",\n          raw: r,\n          text: r\n        };\n      }\n      return de(n, i, n[0], this.lexer, this.rules);\n    }\n  }\n  emStrong(e, t) {\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"\";\n    let s = this.rules.inline.emStrongLDelim.exec(e);\n    if (!s || s[3] && n.match(this.rules.other.unicodeAlphaNumeric)) return;\n    if (!(s[1] || s[2] || \"\") || !n || this.rules.inline.punctuation.exec(n)) {\n      let r = [...s[0]].length - 1,\n        o,\n        l,\n        c = r,\n        p = 0,\n        u = s[0][0] === \"*\" ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      for (u.lastIndex = 0, t = t.slice(-1 * e.length + r); (s = u.exec(t)) != null;) {\n        if (o = s[1] || s[2] || s[3] || s[4] || s[5] || s[6], !o) continue;\n        if (l = [...o].length, s[3] || s[4]) {\n          c += l;\n          continue;\n        } else if ((s[5] || s[6]) && r % 3 && !((r + l) % 3)) {\n          p += l;\n          continue;\n        }\n        if (c -= l, c > 0) continue;\n        l = Math.min(l, l + c + p);\n        let d = [...s[0]][0].length,\n          g = e.slice(0, r + s.index + d + l);\n        if (Math.min(r, l) % 2) {\n          let f = g.slice(1, -1);\n          return {\n            type: \"em\",\n            raw: g,\n            text: f,\n            tokens: this.lexer.inlineTokens(f)\n          };\n        }\n        let x = g.slice(2, -2);\n        return {\n          type: \"strong\",\n          raw: g,\n          text: x,\n          tokens: this.lexer.inlineTokens(x)\n        };\n      }\n    }\n  }\n  codespan(e) {\n    let t = this.rules.inline.code.exec(e);\n    if (t) {\n      let n = t[2].replace(this.rules.other.newLineCharGlobal, \" \"),\n        s = this.rules.other.nonSpaceChar.test(n),\n        i = this.rules.other.startingSpaceChar.test(n) && this.rules.other.endingSpaceChar.test(n);\n      return s && i && (n = n.substring(1, n.length - 1)), {\n        type: \"codespan\",\n        raw: t[0],\n        text: n\n      };\n    }\n  }\n  br(e) {\n    let t = this.rules.inline.br.exec(e);\n    if (t) return {\n      type: \"br\",\n      raw: t[0]\n    };\n  }\n  del(e) {\n    let t = this.rules.inline.del.exec(e);\n    if (t) return {\n      type: \"del\",\n      raw: t[0],\n      text: t[2],\n      tokens: this.lexer.inlineTokens(t[2])\n    };\n  }\n  autolink(e) {\n    let t = this.rules.inline.autolink.exec(e);\n    if (t) {\n      let n, s;\n      return t[2] === \"@\" ? (n = t[1], s = \"mailto:\" + n) : (n = t[1], s = n), {\n        type: \"link\",\n        raw: t[0],\n        text: n,\n        href: s,\n        tokens: [{\n          type: \"text\",\n          raw: n,\n          text: n\n        }]\n      };\n    }\n  }\n  url(e) {\n    let t;\n    if (t = this.rules.inline.url.exec(e)) {\n      let n, s;\n      if (t[2] === \"@\") n = t[0], s = \"mailto:\" + n;else {\n        let i;\n        do i = t[0], t[0] = this.rules.inline._backpedal.exec(t[0])?.[0] ?? \"\"; while (i !== t[0]);\n        n = t[0], t[1] === \"www.\" ? s = \"http://\" + t[0] : s = t[0];\n      }\n      return {\n        type: \"link\",\n        raw: t[0],\n        text: n,\n        href: s,\n        tokens: [{\n          type: \"text\",\n          raw: n,\n          text: n\n        }]\n      };\n    }\n  }\n  inlineText(e) {\n    let t = this.rules.inline.text.exec(e);\n    if (t) {\n      let n = this.lexer.state.inRawBlock;\n      return {\n        type: \"text\",\n        raw: t[0],\n        text: t[0],\n        escaped: n\n      };\n    }\n  }\n};\nvar b = class a {\n  tokens;\n  options;\n  state;\n  tokenizer;\n  inlineQueue;\n  constructor(e) {\n    this.tokens = [], this.tokens.links = Object.create(null), this.options = e || w, this.options.tokenizer = this.options.tokenizer || new S(), this.tokenizer = this.options.tokenizer, this.tokenizer.options = this.options, this.tokenizer.lexer = this, this.inlineQueue = [], this.state = {\n      inLink: !1,\n      inRawBlock: !1,\n      top: !0\n    };\n    let t = {\n      other: m,\n      block: O.normal,\n      inline: P.normal\n    };\n    this.options.pedantic ? (t.block = O.pedantic, t.inline = P.pedantic) : this.options.gfm && (t.block = O.gfm, this.options.breaks ? t.inline = P.breaks : t.inline = P.gfm), this.tokenizer.rules = t;\n  }\n  static get rules() {\n    return {\n      block: O,\n      inline: P\n    };\n  }\n  static lex(e, t) {\n    return new a(t).lex(e);\n  }\n  static lexInline(e, t) {\n    return new a(t).inlineTokens(e);\n  }\n  lex(e) {\n    e = e.replace(m.carriageReturn, `\n`), this.blockTokens(e, this.tokens);\n    for (let t = 0; t < this.inlineQueue.length; t++) {\n      let n = this.inlineQueue[t];\n      this.inlineTokens(n.src, n.tokens);\n    }\n    return this.inlineQueue = [], this.tokens;\n  }\n  blockTokens(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let n = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;\n    for (this.options.pedantic && (e = e.replace(m.tabCharGlobal, \"    \").replace(m.spaceLine, \"\")); e;) {\n      let s;\n      if (this.options.extensions?.block?.some(r => (s = r.call({\n        lexer: this\n      }, e, t)) ? (e = e.substring(s.raw.length), t.push(s), !0) : !1)) continue;\n      if (s = this.tokenizer.space(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        s.raw.length === 1 && r !== void 0 ? r.raw += `\n` : t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.code(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        r?.type === \"paragraph\" || r?.type === \"text\" ? (r.raw += `\n` + s.raw, r.text += `\n` + s.text, this.inlineQueue.at(-1).src = r.text) : t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.fences(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.heading(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.hr(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.blockquote(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.list(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.html(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.def(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        r?.type === \"paragraph\" || r?.type === \"text\" ? (r.raw += `\n` + s.raw, r.text += `\n` + s.raw, this.inlineQueue.at(-1).src = r.text) : this.tokens.links[s.tag] || (this.tokens.links[s.tag] = {\n          href: s.href,\n          title: s.title\n        });\n        continue;\n      }\n      if (s = this.tokenizer.table(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      if (s = this.tokenizer.lheading(e)) {\n        e = e.substring(s.raw.length), t.push(s);\n        continue;\n      }\n      let i = e;\n      if (this.options.extensions?.startBlock) {\n        let r = 1 / 0,\n          o = e.slice(1),\n          l;\n        this.options.extensions.startBlock.forEach(c => {\n          l = c.call({\n            lexer: this\n          }, o), typeof l == \"number\" && l >= 0 && (r = Math.min(r, l));\n        }), r < 1 / 0 && r >= 0 && (i = e.substring(0, r + 1));\n      }\n      if (this.state.top && (s = this.tokenizer.paragraph(i))) {\n        let r = t.at(-1);\n        n && r?.type === \"paragraph\" ? (r.raw += `\n` + s.raw, r.text += `\n` + s.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = r.text) : t.push(s), n = i.length !== e.length, e = e.substring(s.raw.length);\n        continue;\n      }\n      if (s = this.tokenizer.text(e)) {\n        e = e.substring(s.raw.length);\n        let r = t.at(-1);\n        r?.type === \"text\" ? (r.raw += `\n` + s.raw, r.text += `\n` + s.text, this.inlineQueue.pop(), this.inlineQueue.at(-1).src = r.text) : t.push(s);\n        continue;\n      }\n      if (e) {\n        let r = \"Infinite loop on byte: \" + e.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(r);\n          break;\n        } else throw new Error(r);\n      }\n    }\n    return this.state.top = !0, t;\n  }\n  inline(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    return this.inlineQueue.push({\n      src: e,\n      tokens: t\n    }), t;\n  }\n  inlineTokens(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    let n = e,\n      s = null;\n    if (this.tokens.links) {\n      let o = Object.keys(this.tokens.links);\n      if (o.length > 0) for (; (s = this.tokenizer.rules.inline.reflinkSearch.exec(n)) != null;) o.includes(s[0].slice(s[0].lastIndexOf(\"[\") + 1, -1)) && (n = n.slice(0, s.index) + \"[\" + \"a\".repeat(s[0].length - 2) + \"]\" + n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex));\n    }\n    for (; (s = this.tokenizer.rules.inline.anyPunctuation.exec(n)) != null;) n = n.slice(0, s.index) + \"++\" + n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    for (; (s = this.tokenizer.rules.inline.blockSkip.exec(n)) != null;) n = n.slice(0, s.index) + \"[\" + \"a\".repeat(s[0].length - 2) + \"]\" + n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    let i = !1,\n      r = \"\";\n    for (; e;) {\n      i || (r = \"\"), i = !1;\n      let o;\n      if (this.options.extensions?.inline?.some(c => (o = c.call({\n        lexer: this\n      }, e, t)) ? (e = e.substring(o.raw.length), t.push(o), !0) : !1)) continue;\n      if (o = this.tokenizer.escape(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.tag(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.link(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.reflink(e, this.tokens.links)) {\n        e = e.substring(o.raw.length);\n        let c = t.at(-1);\n        o.type === \"text\" && c?.type === \"text\" ? (c.raw += o.raw, c.text += o.text) : t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.emStrong(e, n, r)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.codespan(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.br(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.del(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (o = this.tokenizer.autolink(e)) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      if (!this.state.inLink && (o = this.tokenizer.url(e))) {\n        e = e.substring(o.raw.length), t.push(o);\n        continue;\n      }\n      let l = e;\n      if (this.options.extensions?.startInline) {\n        let c = 1 / 0,\n          p = e.slice(1),\n          u;\n        this.options.extensions.startInline.forEach(d => {\n          u = d.call({\n            lexer: this\n          }, p), typeof u == \"number\" && u >= 0 && (c = Math.min(c, u));\n        }), c < 1 / 0 && c >= 0 && (l = e.substring(0, c + 1));\n      }\n      if (o = this.tokenizer.inlineText(l)) {\n        e = e.substring(o.raw.length), o.raw.slice(-1) !== \"_\" && (r = o.raw.slice(-1)), i = !0;\n        let c = t.at(-1);\n        c?.type === \"text\" ? (c.raw += o.raw, c.text += o.text) : t.push(o);\n        continue;\n      }\n      if (e) {\n        let c = \"Infinite loop on byte: \" + e.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(c);\n          break;\n        } else throw new Error(c);\n      }\n    }\n    return t;\n  }\n};\nvar $ = class {\n  options;\n  parser;\n  constructor(e) {\n    this.options = e || w;\n  }\n  space(e) {\n    return \"\";\n  }\n  code(_ref) {\n    let {\n      text: e,\n      lang: t,\n      escaped: n\n    } = _ref;\n    let s = (t || \"\").match(m.notSpaceStart)?.[0],\n      i = e.replace(m.endingNewline, \"\") + `\n`;\n    return s ? '<pre><code class=\"language-' + R(s) + '\">' + (n ? i : R(i, !0)) + `</code></pre>\n` : \"<pre><code>\" + (n ? i : R(i, !0)) + `</code></pre>\n`;\n  }\n  blockquote(_ref2) {\n    let {\n      tokens: e\n    } = _ref2;\n    return `<blockquote>\n${this.parser.parse(e)}</blockquote>\n`;\n  }\n  html(_ref3) {\n    let {\n      text: e\n    } = _ref3;\n    return e;\n  }\n  heading(_ref4) {\n    let {\n      tokens: e,\n      depth: t\n    } = _ref4;\n    return `<h${t}>${this.parser.parseInline(e)}</h${t}>\n`;\n  }\n  hr(e) {\n    return `<hr>\n`;\n  }\n  list(e) {\n    let t = e.ordered,\n      n = e.start,\n      s = \"\";\n    for (let o = 0; o < e.items.length; o++) {\n      let l = e.items[o];\n      s += this.listitem(l);\n    }\n    let i = t ? \"ol\" : \"ul\",\n      r = t && n !== 1 ? ' start=\"' + n + '\"' : \"\";\n    return \"<\" + i + r + `>\n` + s + \"</\" + i + `>\n`;\n  }\n  listitem(e) {\n    let t = \"\";\n    if (e.task) {\n      let n = this.checkbox({\n        checked: !!e.checked\n      });\n      e.loose ? e.tokens[0]?.type === \"paragraph\" ? (e.tokens[0].text = n + \" \" + e.tokens[0].text, e.tokens[0].tokens && e.tokens[0].tokens.length > 0 && e.tokens[0].tokens[0].type === \"text\" && (e.tokens[0].tokens[0].text = n + \" \" + R(e.tokens[0].tokens[0].text), e.tokens[0].tokens[0].escaped = !0)) : e.tokens.unshift({\n        type: \"text\",\n        raw: n + \" \",\n        text: n + \" \",\n        escaped: !0\n      }) : t += n + \" \";\n    }\n    return t += this.parser.parse(e.tokens, !!e.loose), `<li>${t}</li>\n`;\n  }\n  checkbox(_ref5) {\n    let {\n      checked: e\n    } = _ref5;\n    return \"<input \" + (e ? 'checked=\"\" ' : \"\") + 'disabled=\"\" type=\"checkbox\">';\n  }\n  paragraph(_ref6) {\n    let {\n      tokens: e\n    } = _ref6;\n    return `<p>${this.parser.parseInline(e)}</p>\n`;\n  }\n  table(e) {\n    let t = \"\",\n      n = \"\";\n    for (let i = 0; i < e.header.length; i++) n += this.tablecell(e.header[i]);\n    t += this.tablerow({\n      text: n\n    });\n    let s = \"\";\n    for (let i = 0; i < e.rows.length; i++) {\n      let r = e.rows[i];\n      n = \"\";\n      for (let o = 0; o < r.length; o++) n += this.tablecell(r[o]);\n      s += this.tablerow({\n        text: n\n      });\n    }\n    return s && (s = `<tbody>${s}</tbody>`), `<table>\n<thead>\n` + t + `</thead>\n` + s + `</table>\n`;\n  }\n  tablerow(_ref7) {\n    let {\n      text: e\n    } = _ref7;\n    return `<tr>\n${e}</tr>\n`;\n  }\n  tablecell(e) {\n    let t = this.parser.parseInline(e.tokens),\n      n = e.header ? \"th\" : \"td\";\n    return (e.align ? `<${n} align=\"${e.align}\">` : `<${n}>`) + t + `</${n}>\n`;\n  }\n  strong(_ref8) {\n    let {\n      tokens: e\n    } = _ref8;\n    return `<strong>${this.parser.parseInline(e)}</strong>`;\n  }\n  em(_ref9) {\n    let {\n      tokens: e\n    } = _ref9;\n    return `<em>${this.parser.parseInline(e)}</em>`;\n  }\n  codespan(_ref0) {\n    let {\n      text: e\n    } = _ref0;\n    return `<code>${R(e, !0)}</code>`;\n  }\n  br(e) {\n    return \"<br>\";\n  }\n  del(_ref1) {\n    let {\n      tokens: e\n    } = _ref1;\n    return `<del>${this.parser.parseInline(e)}</del>`;\n  }\n  link(_ref10) {\n    let {\n      href: e,\n      title: t,\n      tokens: n\n    } = _ref10;\n    let s = this.parser.parseInline(n),\n      i = J(e);\n    if (i === null) return s;\n    e = i;\n    let r = '<a href=\"' + e + '\"';\n    return t && (r += ' title=\"' + R(t) + '\"'), r += \">\" + s + \"</a>\", r;\n  }\n  image(_ref11) {\n    let {\n      href: e,\n      title: t,\n      text: n,\n      tokens: s\n    } = _ref11;\n    s && (n = this.parser.parseInline(s, this.parser.textRenderer));\n    let i = J(e);\n    if (i === null) return R(n);\n    e = i;\n    let r = `<img src=\"${e}\" alt=\"${n}\"`;\n    return t && (r += ` title=\"${R(t)}\"`), r += \">\", r;\n  }\n  text(e) {\n    return \"tokens\" in e && e.tokens ? this.parser.parseInline(e.tokens) : \"escaped\" in e && e.escaped ? e.text : R(e.text);\n  }\n};\nvar _ = class {\n  strong(_ref12) {\n    let {\n      text: e\n    } = _ref12;\n    return e;\n  }\n  em(_ref13) {\n    let {\n      text: e\n    } = _ref13;\n    return e;\n  }\n  codespan(_ref14) {\n    let {\n      text: e\n    } = _ref14;\n    return e;\n  }\n  del(_ref15) {\n    let {\n      text: e\n    } = _ref15;\n    return e;\n  }\n  html(_ref16) {\n    let {\n      text: e\n    } = _ref16;\n    return e;\n  }\n  text(_ref17) {\n    let {\n      text: e\n    } = _ref17;\n    return e;\n  }\n  link(_ref18) {\n    let {\n      text: e\n    } = _ref18;\n    return \"\" + e;\n  }\n  image(_ref19) {\n    let {\n      text: e\n    } = _ref19;\n    return \"\" + e;\n  }\n  br() {\n    return \"\";\n  }\n};\nvar T = class a {\n  options;\n  renderer;\n  textRenderer;\n  constructor(e) {\n    this.options = e || w, this.options.renderer = this.options.renderer || new $(), this.renderer = this.options.renderer, this.renderer.options = this.options, this.renderer.parser = this, this.textRenderer = new _();\n  }\n  static parse(e, t) {\n    return new a(t).parse(e);\n  }\n  static parseInline(e, t) {\n    return new a(t).parseInline(e);\n  }\n  parse(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : !0;\n    let n = \"\";\n    for (let s = 0; s < e.length; s++) {\n      let i = e[s];\n      if (this.options.extensions?.renderers?.[i.type]) {\n        let o = i,\n          l = this.options.extensions.renderers[o.type].call({\n            parser: this\n          }, o);\n        if (l !== !1 || ![\"space\", \"hr\", \"heading\", \"code\", \"table\", \"blockquote\", \"list\", \"html\", \"paragraph\", \"text\"].includes(o.type)) {\n          n += l || \"\";\n          continue;\n        }\n      }\n      let r = i;\n      switch (r.type) {\n        case \"space\":\n          {\n            n += this.renderer.space(r);\n            continue;\n          }\n        case \"hr\":\n          {\n            n += this.renderer.hr(r);\n            continue;\n          }\n        case \"heading\":\n          {\n            n += this.renderer.heading(r);\n            continue;\n          }\n        case \"code\":\n          {\n            n += this.renderer.code(r);\n            continue;\n          }\n        case \"table\":\n          {\n            n += this.renderer.table(r);\n            continue;\n          }\n        case \"blockquote\":\n          {\n            n += this.renderer.blockquote(r);\n            continue;\n          }\n        case \"list\":\n          {\n            n += this.renderer.list(r);\n            continue;\n          }\n        case \"html\":\n          {\n            n += this.renderer.html(r);\n            continue;\n          }\n        case \"paragraph\":\n          {\n            n += this.renderer.paragraph(r);\n            continue;\n          }\n        case \"text\":\n          {\n            let o = r,\n              l = this.renderer.text(o);\n            for (; s + 1 < e.length && e[s + 1].type === \"text\";) o = e[++s], l += `\n` + this.renderer.text(o);\n            t ? n += this.renderer.paragraph({\n              type: \"paragraph\",\n              raw: l,\n              text: l,\n              tokens: [{\n                type: \"text\",\n                raw: l,\n                text: l,\n                escaped: !0\n              }]\n            }) : n += l;\n            continue;\n          }\n        default:\n          {\n            let o = 'Token with \"' + r.type + '\" type was not found.';\n            if (this.options.silent) return console.error(o), \"\";\n            throw new Error(o);\n          }\n      }\n    }\n    return n;\n  }\n  parseInline(e) {\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.renderer;\n    let n = \"\";\n    for (let s = 0; s < e.length; s++) {\n      let i = e[s];\n      if (this.options.extensions?.renderers?.[i.type]) {\n        let o = this.options.extensions.renderers[i.type].call({\n          parser: this\n        }, i);\n        if (o !== !1 || ![\"escape\", \"html\", \"link\", \"image\", \"strong\", \"em\", \"codespan\", \"br\", \"del\", \"text\"].includes(i.type)) {\n          n += o || \"\";\n          continue;\n        }\n      }\n      let r = i;\n      switch (r.type) {\n        case \"escape\":\n          {\n            n += t.text(r);\n            break;\n          }\n        case \"html\":\n          {\n            n += t.html(r);\n            break;\n          }\n        case \"link\":\n          {\n            n += t.link(r);\n            break;\n          }\n        case \"image\":\n          {\n            n += t.image(r);\n            break;\n          }\n        case \"strong\":\n          {\n            n += t.strong(r);\n            break;\n          }\n        case \"em\":\n          {\n            n += t.em(r);\n            break;\n          }\n        case \"codespan\":\n          {\n            n += t.codespan(r);\n            break;\n          }\n        case \"br\":\n          {\n            n += t.br(r);\n            break;\n          }\n        case \"del\":\n          {\n            n += t.del(r);\n            break;\n          }\n        case \"text\":\n          {\n            n += t.text(r);\n            break;\n          }\n        default:\n          {\n            let o = 'Token with \"' + r.type + '\" type was not found.';\n            if (this.options.silent) return console.error(o), \"\";\n            throw new Error(o);\n          }\n      }\n    }\n    return n;\n  }\n};\nvar L = class {\n  options;\n  block;\n  constructor(e) {\n    this.options = e || w;\n  }\n  static passThroughHooks = (() => new Set([\"preprocess\", \"postprocess\", \"processAllTokens\"]))();\n  preprocess(e) {\n    return e;\n  }\n  postprocess(e) {\n    return e;\n  }\n  processAllTokens(e) {\n    return e;\n  }\n  provideLexer() {\n    return this.block ? b.lex : b.lexInline;\n  }\n  provideParser() {\n    return this.block ? T.parse : T.parseInline;\n  }\n};\nvar B = class {\n  defaults = (() => M())();\n  options = this.setOptions;\n  parse = (() => this.parseMarkdown(!0))();\n  parseInline = (() => this.parseMarkdown(!1))();\n  Parser = (() => T)();\n  Renderer = (() => $)();\n  TextRenderer = (() => _)();\n  Lexer = (() => b)();\n  Tokenizer = (() => S)();\n  Hooks = (() => L)();\n  constructor() {\n    this.use(...arguments);\n  }\n  walkTokens(e, t) {\n    let n = [];\n    for (let s of e) switch (n = n.concat(t.call(this, s)), s.type) {\n      case \"table\":\n        {\n          let i = s;\n          for (let r of i.header) n = n.concat(this.walkTokens(r.tokens, t));\n          for (let r of i.rows) for (let o of r) n = n.concat(this.walkTokens(o.tokens, t));\n          break;\n        }\n      case \"list\":\n        {\n          let i = s;\n          n = n.concat(this.walkTokens(i.items, t));\n          break;\n        }\n      default:\n        {\n          let i = s;\n          this.defaults.extensions?.childTokens?.[i.type] ? this.defaults.extensions.childTokens[i.type].forEach(r => {\n            let o = i[r].flat(1 / 0);\n            n = n.concat(this.walkTokens(o, t));\n          }) : i.tokens && (n = n.concat(this.walkTokens(i.tokens, t)));\n        }\n    }\n    return n;\n  }\n  use() {\n    let t = this.defaults.extensions || {\n      renderers: {},\n      childTokens: {}\n    };\n    for (var _len = arguments.length, e = new Array(_len), _key = 0; _key < _len; _key++) {\n      e[_key] = arguments[_key];\n    }\n    return e.forEach(n => {\n      let s = {\n        ...n\n      };\n      if (s.async = this.defaults.async || s.async || !1, n.extensions && (n.extensions.forEach(i => {\n        if (!i.name) throw new Error(\"extension name required\");\n        if (\"renderer\" in i) {\n          let r = t.renderers[i.name];\n          r ? t.renderers[i.name] = function () {\n            for (var _len2 = arguments.length, o = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n              o[_key2] = arguments[_key2];\n            }\n            let l = i.renderer.apply(this, o);\n            return l === !1 && (l = r.apply(this, o)), l;\n          } : t.renderers[i.name] = i.renderer;\n        }\n        if (\"tokenizer\" in i) {\n          if (!i.level || i.level !== \"block\" && i.level !== \"inline\") throw new Error(\"extension level must be 'block' or 'inline'\");\n          let r = t[i.level];\n          r ? r.unshift(i.tokenizer) : t[i.level] = [i.tokenizer], i.start && (i.level === \"block\" ? t.startBlock ? t.startBlock.push(i.start) : t.startBlock = [i.start] : i.level === \"inline\" && (t.startInline ? t.startInline.push(i.start) : t.startInline = [i.start]));\n        }\n        \"childTokens\" in i && i.childTokens && (t.childTokens[i.name] = i.childTokens);\n      }), s.extensions = t), n.renderer) {\n        let i = this.defaults.renderer || new $(this.defaults);\n        for (let r in n.renderer) {\n          if (!(r in i)) throw new Error(`renderer '${r}' does not exist`);\n          if ([\"options\", \"parser\"].includes(r)) continue;\n          let o = r,\n            l = n.renderer[o],\n            c = i[o];\n          i[o] = function () {\n            for (var _len3 = arguments.length, p = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n              p[_key3] = arguments[_key3];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u || \"\";\n          };\n        }\n        s.renderer = i;\n      }\n      if (n.tokenizer) {\n        let i = this.defaults.tokenizer || new S(this.defaults);\n        for (let r in n.tokenizer) {\n          if (!(r in i)) throw new Error(`tokenizer '${r}' does not exist`);\n          if ([\"options\", \"rules\", \"lexer\"].includes(r)) continue;\n          let o = r,\n            l = n.tokenizer[o],\n            c = i[o];\n          i[o] = function () {\n            for (var _len4 = arguments.length, p = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n              p[_key4] = arguments[_key4];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u;\n          };\n        }\n        s.tokenizer = i;\n      }\n      if (n.hooks) {\n        let i = this.defaults.hooks || new L();\n        for (let r in n.hooks) {\n          if (!(r in i)) throw new Error(`hook '${r}' does not exist`);\n          if ([\"options\", \"block\"].includes(r)) continue;\n          let o = r,\n            l = n.hooks[o],\n            c = i[o];\n          L.passThroughHooks.has(r) ? i[o] = p => {\n            if (this.defaults.async) return Promise.resolve(l.call(i, p)).then(d => c.call(i, d));\n            let u = l.call(i, p);\n            return c.call(i, u);\n          } : i[o] = function () {\n            for (var _len5 = arguments.length, p = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n              p[_key5] = arguments[_key5];\n            }\n            let u = l.apply(i, p);\n            return u === !1 && (u = c.apply(i, p)), u;\n          };\n        }\n        s.hooks = i;\n      }\n      if (n.walkTokens) {\n        let i = this.defaults.walkTokens,\n          r = n.walkTokens;\n        s.walkTokens = function (o) {\n          let l = [];\n          return l.push(r.call(this, o)), i && (l = l.concat(i.call(this, o))), l;\n        };\n      }\n      this.defaults = {\n        ...this.defaults,\n        ...s\n      };\n    }), this;\n  }\n  setOptions(e) {\n    return this.defaults = {\n      ...this.defaults,\n      ...e\n    }, this;\n  }\n  lexer(e, t) {\n    return b.lex(e, t ?? this.defaults);\n  }\n  parser(e, t) {\n    return T.parse(e, t ?? this.defaults);\n  }\n  parseMarkdown(e) {\n    return (n, s) => {\n      let i = {\n          ...s\n        },\n        r = {\n          ...this.defaults,\n          ...i\n        },\n        o = this.onError(!!r.silent, !!r.async);\n      if (this.defaults.async === !0 && i.async === !1) return o(new Error(\"marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.\"));\n      if (typeof n > \"u\" || n === null) return o(new Error(\"marked(): input parameter is undefined or null\"));\n      if (typeof n != \"string\") return o(new Error(\"marked(): input parameter is of type \" + Object.prototype.toString.call(n) + \", string expected\"));\n      r.hooks && (r.hooks.options = r, r.hooks.block = e);\n      let l = r.hooks ? r.hooks.provideLexer() : e ? b.lex : b.lexInline,\n        c = r.hooks ? r.hooks.provideParser() : e ? T.parse : T.parseInline;\n      if (r.async) return Promise.resolve(r.hooks ? r.hooks.preprocess(n) : n).then(p => l(p, r)).then(p => r.hooks ? r.hooks.processAllTokens(p) : p).then(p => r.walkTokens ? Promise.all(this.walkTokens(p, r.walkTokens)).then(() => p) : p).then(p => c(p, r)).then(p => r.hooks ? r.hooks.postprocess(p) : p).catch(o);\n      try {\n        r.hooks && (n = r.hooks.preprocess(n));\n        let p = l(n, r);\n        r.hooks && (p = r.hooks.processAllTokens(p)), r.walkTokens && this.walkTokens(p, r.walkTokens);\n        let u = c(p, r);\n        return r.hooks && (u = r.hooks.postprocess(u)), u;\n      } catch (p) {\n        return o(p);\n      }\n    };\n  }\n  onError(e, t) {\n    return n => {\n      if (n.message += `\nPlease report this to https://github.com/markedjs/marked.`, e) {\n        let s = \"<p>An error occurred:</p><pre>\" + R(n.message + \"\", !0) + \"</pre>\";\n        return t ? Promise.resolve(s) : s;\n      }\n      if (t) return Promise.reject(n);\n      throw n;\n    };\n  }\n};\nvar z = new B();\nfunction k(a, e) {\n  return z.parse(a, e);\n}\nk.options = k.setOptions = function (a) {\n  return z.setOptions(a), k.defaults = z.defaults, H(k.defaults), k;\n};\nk.getDefaults = M;\nk.defaults = w;\nk.use = function () {\n  return z.use(...arguments), k.defaults = z.defaults, H(k.defaults), k;\n};\nk.walkTokens = function (a, e) {\n  return z.walkTokens(a, e);\n};\nk.parseInline = z.parseInline;\nk.Parser = T;\nk.parser = T.parse;\nk.Renderer = $;\nk.TextRenderer = _;\nk.Lexer = b;\nk.lexer = b.lex;\nk.Tokenizer = S;\nk.Hooks = L;\nk.parse = k;\nvar Dt = k.options,\n  Zt = k.setOptions,\n  Gt = k.use,\n  Ht = k.walkTokens,\n  Nt = k.parseInline,\n  jt = k,\n  Ft = T.parse,\n  Qt = b.lex;\nexport { L as Hooks, b as Lexer, B as Marked, T as Parser, $ as Renderer, _ as TextRenderer, S as Tokenizer, w as defaults, M as getDefaults, Qt as lexer, k as marked, Dt as options, jt as parse, Nt as parseInline, Ft as parser, Zt as setOptions, Gt as use, Ht as walkTokens };","map":{"version":3,"names":["M","async","breaks","extensions","gfm","hooks","pedantic","renderer","silent","tokenizer","walkTokens","w","H","a","C","exec","h","e","arguments","length","undefined","t","source","n","replace","s","i","r","m","caret","getRegex","RegExp","codeRemoveIndent","outputLinkReplace","indentCodeCompensation","beginningSpace","endingHash","startingSpaceChar","endingSpaceChar","nonSpaceChar","newLineCharGlobal","tabCharGlobal","multipleSpaceGlobal","blankLine","doubleBlankLine","blockquoteStart","blockquoteSetextReplace","blockquoteSetextReplace2","listReplaceTabs","listReplaceNesting","listIsTask","listReplaceTask","anyLine","hrefBrackets","tableDelimiter","tableAlignChars","tableRowBlankLine","tableAlignRight","tableAlignCenter","tableAlignLeft","startATag","endATag","startPreScriptTag","endPreScriptTag","startAngleBracket","endAngleBracket","pedanticHrefTitle","unicodeAlphaNumeric","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","unescapeTest","percentDecode","findPipe","splitPipe","slashPipe","carriageReturn","spaceLine","notSpaceStart","endingNewline","listItemRegex","nextBulletRegex","Math","min","hrRegex","fencesBeginRegex","headingBeginRegex","htmlBeginRegex","xe","be","Te","I","we","j","re","ie","ye","F","Re","Q","Se","$e","v","U","_e","oe","Le","K","blockquote","code","def","fences","heading","hr","html","lheading","list","newline","paragraph","table","text","se","ze","Me","Pe","Ae","le","Ee","D","X","ae","Ce","ce","Ie","Oe","Be","pe","qe","ve","ue","De","Ze","Ge","He","Ne","je","Fe","q","Qe","he","ke","Ue","W","_backpedal","anyPunctuation","autolink","blockSkip","br","del","emStrongLDelim","emStrongRDelimAst","emStrongRDelimUnd","escape","link","nolink","punctuation","reflink","reflinkSearch","tag","url","Ke","N","Xe","O","normal","P","We","ge","R","test","J","encodeURI","V","o","l","c","split","trim","shift","at","pop","splice","push","A","charAt","slice","fe","indexOf","de","href","title","other","state","inLink","type","raw","tokens","inlineTokens","Je","match","map","join","S","options","rules","lexer","constructor","space","block","codeBlockStyle","lang","inline","depth","p","u","d","top","blockTokens","g","x","f","y","substring","ordered","start","loose","items","Z","repeat","trimStart","search","ee","te","ne","me","G","E","Y","task","checked","trimEnd","filter","some","pre","toLowerCase","header","align","rows","inRawBlock","emStrong","lastIndex","index","codespan","inlineText","escaped","b","inlineQueue","links","Object","create","lex","lexInline","src","call","startBlock","forEach","charCodeAt","console","error","Error","keys","includes","lastIndexOf","startInline","$","parser","_ref","_ref2","parse","_ref3","_ref4","parseInline","listitem","checkbox","unshift","_ref5","_ref6","tablecell","tablerow","_ref7","strong","_ref8","em","_ref9","_ref0","_ref1","_ref10","image","_ref11","textRenderer","_","_ref12","_ref13","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","T","renderers","L","passThroughHooks","Set","preprocess","postprocess","processAllTokens","provideLexer","provideParser","B","defaults","setOptions","parseMarkdown","Parser","Renderer","TextRenderer","Lexer","Tokenizer","Hooks","use","concat","childTokens","flat","_len","Array","_key","name","_len2","_key2","apply","level","_len3","_key3","_len4","_key4","has","Promise","resolve","then","_len5","_key5","onError","prototype","toString","all","catch","message","reject","z","k","getDefaults","Dt","Zt","Gt","Ht","Nt","jt","Ft","Qt","Marked","marked"],"sources":["C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\defaults.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\rules.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\helpers.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Tokenizer.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Lexer.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Renderer.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\TextRenderer.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Parser.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Hooks.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\Instance.ts","C:\\Users\\Soheil\\Desktop\\Codebase\\GitHub\\quant-blog\\node_modules\\marked\\src\\marked.ts"],"sourcesContent":["import type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Gets the original marked default options.\n */\nexport function _getDefaults(): MarkedOptions {\n  return {\n    async: false,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    hooks: null,\n    pedantic: false,\n    renderer: null,\n    silent: false,\n    tokenizer: null,\n    walkTokens: null,\n  };\n}\n\nexport let _defaults = _getDefaults();\n\nexport function changeDefaults(newDefaults: MarkedOptions) {\n  _defaults = newDefaults;\n}\n","const noopTest = { exec: () => null } as unknown as RegExp;\n\nfunction edit(regex: string | RegExp, opt = '') {\n  let source = typeof regex === 'string' ? regex : regex.source;\n  const obj = {\n    replace: (name: string | RegExp, val: string | RegExp) => {\n      let valSource = typeof val === 'string' ? val : val.source;\n      valSource = valSource.replace(other.caret, '$1');\n      source = source.replace(name, valSource);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(source, opt);\n    },\n  };\n  return obj;\n}\n\nexport const other = {\n  codeRemoveIndent: /^(?: {1,4}| {0,3}\\t)/gm,\n  outputLinkReplace: /\\\\([\\[\\]])/g,\n  indentCodeCompensation: /^(\\s+)(?:```)/,\n  beginningSpace: /^\\s+/,\n  endingHash: /#$/,\n  startingSpaceChar: /^ /,\n  endingSpaceChar: / $/,\n  nonSpaceChar: /[^ ]/,\n  newLineCharGlobal: /\\n/g,\n  tabCharGlobal: /\\t/g,\n  multipleSpaceGlobal: /\\s+/g,\n  blankLine: /^[ \\t]*$/,\n  doubleBlankLine: /\\n[ \\t]*\\n[ \\t]*$/,\n  blockquoteStart: /^ {0,3}>/,\n  blockquoteSetextReplace: /\\n {0,3}((?:=+|-+) *)(?=\\n|$)/g,\n  blockquoteSetextReplace2: /^ {0,3}>[ \\t]?/gm,\n  listReplaceTabs: /^\\t+/,\n  listReplaceNesting: /^ {1,4}(?=( {4})*[^ ])/g,\n  listIsTask: /^\\[[ xX]\\] /,\n  listReplaceTask: /^\\[[ xX]\\] +/,\n  anyLine: /\\n.*\\n/,\n  hrefBrackets: /^<(.*)>$/,\n  tableDelimiter: /[:|]/,\n  tableAlignChars: /^\\||\\| *$/g,\n  tableRowBlankLine: /\\n[ \\t]*$/,\n  tableAlignRight: /^ *-+: *$/,\n  tableAlignCenter: /^ *:-+: *$/,\n  tableAlignLeft: /^ *:-+ *$/,\n  startATag: /^<a /i,\n  endATag: /^<\\/a>/i,\n  startPreScriptTag: /^<(pre|code|kbd|script)(\\s|>)/i,\n  endPreScriptTag: /^<\\/(pre|code|kbd|script)(\\s|>)/i,\n  startAngleBracket: /^</,\n  endAngleBracket: />$/,\n  pedanticHrefTitle: /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/,\n  unicodeAlphaNumeric: /[\\p{L}\\p{N}]/u,\n  escapeTest: /[&<>\"']/,\n  escapeReplace: /[&<>\"']/g,\n  escapeTestNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/,\n  escapeReplaceNoEncode: /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/g,\n  unescapeTest: /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig,\n  caret: /(^|[^\\[])\\^/g,\n  percentDecode: /%25/g,\n  findPipe: /\\|/g,\n  splitPipe: / \\|/,\n  slashPipe: /\\\\\\|/g,\n  carriageReturn: /\\r\\n|\\r/g,\n  spaceLine: /^ +$/gm,\n  notSpaceStart: /^\\S*/,\n  endingNewline: /\\n$/,\n  listItemRegex: (bull: string) => new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`),\n  nextBulletRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`),\n  hrRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`),\n  fencesBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`),\n  headingBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`),\n  htmlBeginRegex: (indent: number) => new RegExp(`^ {0,${Math.min(3, indent - 1)}}<(?:[a-z].*>|!--)`, 'i'),\n};\n\n/**\n * Block-Level Grammar\n */\n\nconst newline = /^(?:[ \\t]*(?:\\n|$))+/;\nconst blockCode = /^((?: {4}| {0,3}\\t)[^\\n]+(?:\\n(?:[ \\t]*(?:\\n|$))*)?)+/;\nconst fences = /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/;\nconst hr = /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/;\nconst heading = /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/;\nconst bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nconst lheadingCore = /^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\\n(?!\\s*?\\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/;\nconst lheading = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/\\|table/g, '') // table not in commonmark\n  .getRegex();\nconst lheadingGfm = edit(lheadingCore)\n  .replace(/bull/g, bullet) // lists can interrupt\n  .replace(/blockCode/g, /(?: {4}| {0,3}\\t)/) // indented code blocks can interrupt\n  .replace(/fences/g, / {0,3}(?:`{3,}|~{3,})/) // fenced code blocks can interrupt\n  .replace(/blockquote/g, / {0,3}>/) // blockquote can interrupt\n  .replace(/heading/g, / {0,3}#{1,6}/) // ATX heading can interrupt\n  .replace(/html/g, / {0,3}<[^\\n>]+>\\n/) // block html can interrupt\n  .replace(/table/g, / {0,3}\\|?(?:[:\\- ]*\\|)+[\\:\\- ]*\\n/) // table can interrupt\n  .getRegex();\nconst _paragraph = /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/;\nconst blockText = /^[^\\n]+/;\nconst _blockLabel = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nconst def = edit(/^ {0,3}\\[(label)\\]: *(?:\\n[ \\t]*)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n[ \\t]*)?| *\\n[ \\t]*)(title))? *(?:\\n+|$)/)\n  .replace('label', _blockLabel)\n  .replace('title', /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/)\n  .getRegex();\n\nconst list = edit(/^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/)\n  .replace(/bull/g, bullet)\n  .getRegex();\n\nconst _tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title'\n  + '|tr|track|ul';\nconst _comment = /<!--(?:-?>|[\\s\\S]*?(?:-->|$))/;\nconst html = edit(\n  '^ {0,3}(?:' // optional indentation\n+ '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n+ '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n+ '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n+ '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n+ '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n+ '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (6)\n+ '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) open tag\n+ '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n[ \\t]*)+\\\\n|$)' // (7) closing tag\n+ ')', 'i')\n  .replace('comment', _comment)\n  .replace('tag', _tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst paragraph = edit(_paragraph)\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockquote = edit(/^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/)\n  .replace('paragraph', paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nconst blockNormal = {\n  blockquote,\n  code: blockCode,\n  def,\n  fences,\n  heading,\n  hr,\n  html,\n  lheading,\n  list,\n  newline,\n  paragraph,\n  table: noopTest,\n  text: blockText,\n};\n\ntype BlockKeys = keyof typeof blockNormal;\n\n/**\n * GFM Block Grammar\n */\n\nconst gfmTable = edit(\n  '^ *([^\\\\n ].*)\\\\n' // Header\n+ ' {0,3}((?:\\\\| *)?:?-+:? *(?:\\\\| *:?-+:? *)*(?:\\\\| *)?)' // Align\n+ '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)') // Cells\n  .replace('hr', hr)\n  .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', '(?: {4}| {0,3}\\t)[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', _tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nconst blockGfm: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  lheading: lheadingGfm,\n  table: gfmTable,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' {0,3}#{1,6}(?:\\\\s|$)')\n    .replace('|lheading', '') // setext headings don't interrupt commonmark paragraphs\n    .replace('table', gfmTable) // interrupt paragraphs with table\n    .replace('blockquote', ' {0,3}>')\n    .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n    .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n    .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n    .replace('tag', _tag) // pars can be interrupted by type (6) html blocks\n    .getRegex(),\n};\n\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nconst blockPedantic: Record<BlockKeys, RegExp> = {\n  ...blockNormal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', _comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(_paragraph)\n    .replace('hr', hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', lheading)\n    .replace('|table', '')\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .replace('|tag', '')\n    .getRegex(),\n};\n\n/**\n * Inline-Level Grammar\n */\n\nconst escape = /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/;\nconst inlineCode = /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/;\nconst br = /^( {2,}|\\\\)\\n(?!\\s*$)/;\nconst inlineText = /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/;\n\n// list of unicode punctuation marks, plus any missing characters from CommonMark spec\nconst _punctuation = /[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpace = /[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpace = /[^\\s\\p{P}\\p{S}]/u;\nconst punctuation = edit(/^((?![*_])punctSpace)/, 'u')\n  .replace(/punctSpace/g, _punctuationOrSpace).getRegex();\n\n// GFM allows ~ inside strong and em for strikethrough\nconst _punctuationGfmStrongEm = /(?!~)[\\p{P}\\p{S}]/u;\nconst _punctuationOrSpaceGfmStrongEm = /(?!~)[\\s\\p{P}\\p{S}]/u;\nconst _notPunctuationOrSpaceGfmStrongEm = /(?:[^\\s\\p{P}\\p{S}]|~)/u;\n\n// sequences em should skip over [title](link), `code`, <html>\nconst blockSkip = /\\[[^[\\]]*?\\]\\((?:\\\\.|[^\\\\\\(\\)]|\\((?:\\\\.|[^\\\\\\(\\)])*\\))*\\)|`[^`]*?`|<[^<>]*?>/g;\n\nconst emStrongLDelimCore = /^(?:\\*+(?:((?!\\*)punct)|[^\\s*]))|^_+(?:((?!_)punct)|([^\\s_]))/;\n\nconst emStrongLDelim = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongLDelimGfm = edit(emStrongLDelimCore, 'u')\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\nconst emStrongRDelimAstCore =\n  '^[^_*]*?__[^_*]*?\\\\*[^_*]*?(?=__)' // Skip orphan inside strong\n+ '|[^*]+(?=[^*])' // Consume to delim\n+ '|(?!\\\\*)punct(\\\\*+)(?=[\\\\s]|$)' // (1) #*** can only be a Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?!\\\\*)(?=punctSpace|$)' // (2) a***#, a*** can only be a Right Delimiter\n+ '|(?!\\\\*)punctSpace(\\\\*+)(?=notPunctSpace)' // (3) #***a, ***a can only be Left Delimiter\n+ '|[\\\\s](\\\\*+)(?!\\\\*)(?=punct)' // (4) ***# can only be Left Delimiter\n+ '|(?!\\\\*)punct(\\\\*+)(?!\\\\*)(?=punct)' // (5) #***# can be either Left or Right Delimiter\n+ '|notPunctSpace(\\\\*+)(?=notPunctSpace)'; // (6) a***a can be either Left or Right Delimiter\n\nconst emStrongRDelimAst = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst emStrongRDelimAstGfm = edit(emStrongRDelimAstCore, 'gu')\n  .replace(/notPunctSpace/g, _notPunctuationOrSpaceGfmStrongEm)\n  .replace(/punctSpace/g, _punctuationOrSpaceGfmStrongEm)\n  .replace(/punct/g, _punctuationGfmStrongEm)\n  .getRegex();\n\n// (6) Not allowed for _\nconst emStrongRDelimUnd = edit(\n  '^[^_*]*?\\\\*\\\\*[^_*]*?_[^_*]*?(?=\\\\*\\\\*)' // Skip orphan inside strong\n+ '|[^_]+(?=[^_])' // Consume to delim\n+ '|(?!_)punct(_+)(?=[\\\\s]|$)' // (1) #___ can only be a Right Delimiter\n+ '|notPunctSpace(_+)(?!_)(?=punctSpace|$)' // (2) a___#, a___ can only be a Right Delimiter\n+ '|(?!_)punctSpace(_+)(?=notPunctSpace)' // (3) #___a, ___a can only be Left Delimiter\n+ '|[\\\\s](_+)(?!_)(?=punct)' // (4) ___# can only be Left Delimiter\n+ '|(?!_)punct(_+)(?!_)(?=punct)', 'gu') // (5) #___# can be either Left or Right Delimiter\n  .replace(/notPunctSpace/g, _notPunctuationOrSpace)\n  .replace(/punctSpace/g, _punctuationOrSpace)\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst anyPunctuation = edit(/\\\\(punct)/, 'gu')\n  .replace(/punct/g, _punctuation)\n  .getRegex();\n\nconst autolink = edit(/^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/)\n  .replace('scheme', /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/)\n  .replace('email', /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/)\n  .getRegex();\n\nconst _inlineComment = edit(_comment).replace('(?:-->|$)', '-->').getRegex();\nconst tag = edit(\n  '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>') // CDATA section\n  .replace('comment', _inlineComment)\n  .replace('attribute', /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nconst _inlineLabel = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\n\nconst link = edit(/^!?\\[(label)\\]\\(\\s*(href)(?:(?:[ \\t]*(?:\\n[ \\t]*)?)(title))?\\s*\\)/)\n  .replace('label', _inlineLabel)\n  .replace('href', /<(?:\\\\.|[^\\n<>\\\\])+>|[^ \\t\\n\\x00-\\x1f]*/)\n  .replace('title', /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/)\n  .getRegex();\n\nconst reflink = edit(/^!?\\[(label)\\]\\[(ref)\\]/)\n  .replace('label', _inlineLabel)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst nolink = edit(/^!?\\[(ref)\\](?:\\[\\])?/)\n  .replace('ref', _blockLabel)\n  .getRegex();\n\nconst reflinkSearch = edit('reflink|nolink(?!\\\\()', 'g')\n  .replace('reflink', reflink)\n  .replace('nolink', nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\nconst inlineNormal = {\n  _backpedal: noopTest, // only used for GFM url\n  anyPunctuation,\n  autolink,\n  blockSkip,\n  br,\n  code: inlineCode,\n  del: noopTest,\n  emStrongLDelim,\n  emStrongRDelimAst,\n  emStrongRDelimUnd,\n  escape,\n  link,\n  nolink,\n  punctuation,\n  reflink,\n  reflinkSearch,\n  tag,\n  text: inlineText,\n  url: noopTest,\n};\n\ntype InlineKeys = keyof typeof inlineNormal;\n\n/**\n * Pedantic Inline Grammar\n */\n\nconst inlinePedantic: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', _inlineLabel)\n    .getRegex(),\n};\n\n/**\n * GFM Inline Grammar\n */\n\nconst inlineGfm: Record<InlineKeys, RegExp> = {\n  ...inlineNormal,\n  emStrongRDelimAst: emStrongRDelimAstGfm,\n  emStrongLDelim: emStrongLDelimGfm,\n  url: edit(/^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/, 'i')\n    .replace('email', /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/)\n    .getRegex(),\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])((?:\\\\.|[^\\\\])*?(?:\\\\.|[^\\s~\\\\]))\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/,\n};\n\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\nconst inlineBreaks: Record<InlineKeys, RegExp> = {\n  ...inlineGfm,\n  br: edit(br).replace('{2,}', '*').getRegex(),\n  text: edit(inlineGfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex(),\n};\n\n/**\n * exports\n */\n\nexport const block = {\n  normal: blockNormal,\n  gfm: blockGfm,\n  pedantic: blockPedantic,\n};\n\nexport const inline = {\n  normal: inlineNormal,\n  gfm: inlineGfm,\n  breaks: inlineBreaks,\n  pedantic: inlinePedantic,\n};\n\nexport interface Rules {\n  other: typeof other\n  block: Record<BlockKeys, RegExp>\n  inline: Record<InlineKeys, RegExp>\n}\n","import { other } from './rules.ts';\n\n/**\n * Helpers\n */\nconst escapeReplacements: { [index: string]: string } = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;',\n};\nconst getEscapeReplacement = (ch: string) => escapeReplacements[ch];\n\nexport function escape(html: string, encode?: boolean) {\n  if (encode) {\n    if (other.escapeTest.test(html)) {\n      return html.replace(other.escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (other.escapeTestNoEncode.test(html)) {\n      return html.replace(other.escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nexport function unescape(html: string) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(other.unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nexport function cleanUrl(href: string) {\n  try {\n    href = encodeURI(href).replace(other.percentDecode, '%');\n  } catch {\n    return null;\n  }\n  return href;\n}\n\nexport function splitCells(tableRow: string, count?: number) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(other.findPipe, (match, offset, str) => {\n      let escaped = false;\n      let curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(other.splitPipe);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) {\n    cells.shift();\n  }\n  if (cells.length > 0 && !cells.at(-1)?.trim()) {\n    cells.pop();\n  }\n\n  if (count) {\n    if (cells.length > count) {\n      cells.splice(count);\n    } else {\n      while (cells.length < count) cells.push('');\n    }\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(other.slashPipe, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param str\n * @param c\n * @param invert Remove suffix of non-c chars instead. Default falsey.\n */\nexport function rtrim(str: string, c: string, invert?: boolean) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nexport function findClosingBracket(str: string, b: string) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n\n  let level = 0;\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  if (level > 0) {\n    return -2;\n  }\n\n  return -1;\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  rtrim,\n  splitCells,\n  findClosingBracket,\n} from './helpers.ts';\nimport type { Rules } from './rules.ts';\nimport type { _Lexer } from './Lexer.ts';\nimport type { Links, Tokens, Token } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\nfunction outputLink(cap: string[], link: Pick<Tokens.Link, 'href' | 'title'>, raw: string, lexer: _Lexer, rules: Rules): Tokens.Link | Tokens.Image {\n  const href = link.href;\n  const title = link.title || null;\n  const text = cap[1].replace(rules.other.outputLinkReplace, '$1');\n\n  lexer.state.inLink = true;\n  const token: Tokens.Link | Tokens.Image = {\n    type: cap[0].charAt(0) === '!' ? 'image' : 'link',\n    raw,\n    href,\n    title,\n    text,\n    tokens: lexer.inlineTokens(text),\n  };\n  lexer.state.inLink = false;\n  return token;\n}\n\nfunction indentCodeCompensation(raw: string, text: string, rules: Rules) {\n  const matchIndentToCode = raw.match(rules.other.indentCodeCompensation);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(rules.other.beginningSpace);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nexport class _Tokenizer {\n  options: MarkedOptions;\n  rules!: Rules; // set by the lexer\n  lexer!: _Lexer; // set by the lexer\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(src: string): Tokens.Space | undefined {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0],\n      };\n    }\n  }\n\n  code(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(this.rules.other.codeRemoveIndent, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text,\n      };\n    }\n  }\n\n  fences(src: string): Tokens.Code | undefined {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '', this.rules);\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline.anyPunctuation, '$1') : cap[2],\n        text,\n      };\n    }\n  }\n\n  heading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (this.rules.other.endingHash.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || this.rules.other.endingSpaceChar.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  hr(src: string): Tokens.Hr | undefined {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: rtrim(cap[0], '\\n'),\n      };\n    }\n  }\n\n  blockquote(src: string): Tokens.Blockquote | undefined {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      let lines = rtrim(cap[0], '\\n').split('\\n');\n      let raw = '';\n      let text = '';\n      const tokens: Token[] = [];\n\n      while (lines.length > 0) {\n        let inBlockquote = false;\n        const currentLines = [];\n\n        let i;\n        for (i = 0; i < lines.length; i++) {\n          // get lines up to a continuation\n          if (this.rules.other.blockquoteStart.test(lines[i])) {\n            currentLines.push(lines[i]);\n            inBlockquote = true;\n          } else if (!inBlockquote) {\n            currentLines.push(lines[i]);\n          } else {\n            break;\n          }\n        }\n        lines = lines.slice(i);\n\n        const currentRaw = currentLines.join('\\n');\n        const currentText = currentRaw\n          // precede setext continuation with 4 spaces so it isn't a setext\n          .replace(this.rules.other.blockquoteSetextReplace, '\\n    $1')\n          .replace(this.rules.other.blockquoteSetextReplace2, '');\n        raw = raw ? `${raw}\\n${currentRaw}` : currentRaw;\n        text = text ? `${text}\\n${currentText}` : currentText;\n\n        // parse blockquote lines as top level tokens\n        // merge paragraphs if this is a continuation\n        const top = this.lexer.state.top;\n        this.lexer.state.top = true;\n        this.lexer.blockTokens(currentText, tokens, true);\n        this.lexer.state.top = top;\n\n        // if there is no continuation then we are done\n        if (lines.length === 0) {\n          break;\n        }\n\n        const lastToken = tokens.at(-1);\n\n        if (lastToken?.type === 'code') {\n          // blockquote continuation cannot be preceded by a code block\n          break;\n        } else if (lastToken?.type === 'blockquote') {\n          // include continuation in nested blockquote\n          const oldToken = lastToken as Tokens.Blockquote;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.blockquote(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - oldToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.text.length) + newToken.text;\n          break;\n        } else if (lastToken?.type === 'list') {\n          // include continuation in nested list\n          const oldToken = lastToken as Tokens.List;\n          const newText = oldToken.raw + '\\n' + lines.join('\\n');\n          const newToken = this.list(newText)!;\n          tokens[tokens.length - 1] = newToken;\n\n          raw = raw.substring(0, raw.length - lastToken.raw.length) + newToken.raw;\n          text = text.substring(0, text.length - oldToken.raw.length) + newToken.raw;\n          lines = newText.substring(tokens.at(-1)!.raw.length).split('\\n');\n          continue;\n        }\n      }\n\n      return {\n        type: 'blockquote',\n        raw,\n        tokens,\n        text,\n      };\n    }\n  }\n\n  list(src: string): Tokens.List | undefined {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list: Tokens.List = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: [],\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = this.rules.other.listItemRegex(bull);\n      let endsWithBlankLine = false;\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        let endEarly = false;\n        let raw = '';\n        let itemContents = '';\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        let line = cap[2].split('\\n', 1)[0].replace(this.rules.other.listReplaceTabs, (t: string) => ' '.repeat(3 * t.length));\n        let nextLine = src.split('\\n', 1)[0];\n        let blankLine = !line.trim();\n\n        let indent = 0;\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimStart();\n        } else if (blankLine) {\n          indent = cap[1].length + 1;\n        } else {\n          indent = cap[2].search(this.rules.other.nonSpaceChar); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        if (blankLine && this.rules.other.blankLine.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = this.rules.other.nextBulletRegex(indent);\n          const hrRegex = this.rules.other.hrRegex(indent);\n          const fencesBeginRegex = this.rules.other.fencesBeginRegex(indent);\n          const headingBeginRegex = this.rules.other.headingBeginRegex(indent);\n          const htmlBeginRegex = this.rules.other.htmlBeginRegex(indent);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            const rawLine = src.split('\\n', 1)[0];\n            let nextLineWithoutTabs;\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(this.rules.other.listReplaceNesting, '  ');\n              nextLineWithoutTabs = nextLine;\n            } else {\n              nextLineWithoutTabs = nextLine.replace(this.rules.other.tabCharGlobal, '    ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of html block\n            if (htmlBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(nextLine)) {\n              break;\n            }\n\n            if (nextLineWithoutTabs.search(this.rules.other.nonSpaceChar) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLineWithoutTabs.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.replace(this.rules.other.tabCharGlobal, '    ').search(this.rules.other.nonSpaceChar) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLineWithoutTabs.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (this.rules.other.doubleBlankLine.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        let istask: RegExpExecArray | null = null;\n        let ischecked: boolean | undefined;\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = this.rules.other.listIsTask.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(this.rules.other.listReplaceTask, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents,\n          tokens: [],\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      const lastItem = list.items.at(-1);\n      if (lastItem) {\n        lastItem.raw = lastItem.raw.trimEnd();\n        lastItem.text = lastItem.text.trimEnd();\n      } else {\n        // not a list since there were no items\n        return;\n      }\n      list.raw = list.raw.trimEnd();\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (let i = 0; i < list.items.length; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => this.rules.other.anyLine.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (let i = 0; i < list.items.length; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src: string): Tokens.HTML | undefined {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token: Tokens.HTML = {\n        type: 'html',\n        block: true,\n        raw: cap[0],\n        pre: cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style',\n        text: cap[0],\n      };\n      return token;\n    }\n  }\n\n  def(src: string): Tokens.Def | undefined {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const href = cap[2] ? cap[2].replace(this.rules.other.hrefBrackets, '$1').replace(this.rules.inline.anyPunctuation, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline.anyPunctuation, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title,\n      };\n    }\n  }\n\n  table(src: string): Tokens.Table | undefined {\n    const cap = this.rules.block.table.exec(src);\n    if (!cap) {\n      return;\n    }\n\n    if (!this.rules.other.tableDelimiter.test(cap[2])) {\n      // delimiter row must have a pipe (|) or colon (:) otherwise it is a setext heading\n      return;\n    }\n\n    const headers = splitCells(cap[1]);\n    const aligns = cap[2].replace(this.rules.other.tableAlignChars, '').split('|');\n    const rows = cap[3]?.trim() ? cap[3].replace(this.rules.other.tableRowBlankLine, '').split('\\n') : [];\n\n    const item: Tokens.Table = {\n      type: 'table',\n      raw: cap[0],\n      header: [],\n      align: [],\n      rows: [],\n    };\n\n    if (headers.length !== aligns.length) {\n      // header and align columns must be equal, rows can be different.\n      return;\n    }\n\n    for (const align of aligns) {\n      if (this.rules.other.tableAlignRight.test(align)) {\n        item.align.push('right');\n      } else if (this.rules.other.tableAlignCenter.test(align)) {\n        item.align.push('center');\n      } else if (this.rules.other.tableAlignLeft.test(align)) {\n        item.align.push('left');\n      } else {\n        item.align.push(null);\n      }\n    }\n\n    for (let i = 0; i < headers.length; i++) {\n      item.header.push({\n        text: headers[i],\n        tokens: this.lexer.inline(headers[i]),\n        header: true,\n        align: item.align[i],\n      });\n    }\n\n    for (const row of rows) {\n      item.rows.push(splitCells(row, item.header.length).map((cell, i) => {\n        return {\n          text: cell,\n          tokens: this.lexer.inline(cell),\n          header: false,\n          align: item.align[i],\n        };\n      }));\n    }\n\n    return item;\n  }\n\n  lheading(src: string): Tokens.Heading | undefined {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1]),\n      };\n    }\n  }\n\n  paragraph(src: string): Tokens.Paragraph | undefined {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text),\n      };\n    }\n  }\n\n  text(src: string): Tokens.Text | undefined {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0]),\n      };\n    }\n  }\n\n  escape(src: string): Tokens.Escape | undefined {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: cap[1],\n      };\n    }\n  }\n\n  tag(src: string): Tokens.Tag | undefined {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && this.rules.other.startATag.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && this.rules.other.endATag.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && this.rules.other.startPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && this.rules.other.endPreScriptTag.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        block: false,\n        text: cap[0],\n      };\n    }\n  }\n\n  link(src: string): Tokens.Link | Tokens.Image | undefined {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && this.rules.other.startAngleBracket.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex === -2) {\n          // more open parens than closed\n          return;\n        }\n\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = this.rules.other.pedanticHrefTitle.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (this.rules.other.startAngleBracket.test(href)) {\n        if (this.options.pedantic && !(this.rules.other.endAngleBracket.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline.anyPunctuation, '$1') : href,\n        title: title ? title.replace(this.rules.inline.anyPunctuation, '$1') : title,\n      }, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  reflink(src: string, links: Links): Tokens.Link | Tokens.Image | Tokens.Text | undefined {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n      || (cap = this.rules.inline.nolink.exec(src))) {\n      const linkString = (cap[2] || cap[1]).replace(this.rules.other.multipleSpaceGlobal, ' ');\n      const link = links[linkString.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text,\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer, this.rules);\n    }\n  }\n\n  emStrong(src: string, maskedSrc: string, prevChar = ''): Tokens.Em | Tokens.Strong | undefined {\n    let match = this.rules.inline.emStrongLDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(this.rules.other.unicodeAlphaNumeric)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || !prevChar || this.rules.inline.punctuation.exec(prevChar)) {\n      // unicode Regex counts emoji as 1 char; spread into array for proper count (used multiple times below)\n      const lLength = [...match[0]].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrongRDelimAst : this.rules.inline.emStrongRDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = [...rDelim].length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n        // char length can be >1 for unicode characters;\n        const lastCharLength = [...match[0]][0].length;\n        const raw = src.slice(0, lLength + match.index + lastCharLength + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text),\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text),\n        };\n      }\n    }\n  }\n\n  codespan(src: string): Tokens.Codespan | undefined {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(this.rules.other.newLineCharGlobal, ' ');\n      const hasNonSpaceChars = this.rules.other.nonSpaceChar.test(text);\n      const hasSpaceCharsOnBothEnds = this.rules.other.startingSpaceChar.test(text) && this.rules.other.endingSpaceChar.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text,\n      };\n    }\n  }\n\n  br(src: string): Tokens.Br | undefined {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0],\n      };\n    }\n  }\n\n  del(src: string): Tokens.Del | undefined {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2]),\n      };\n    }\n  }\n\n  autolink(src: string): Tokens.Link | undefined {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[1];\n        href = 'mailto:' + text;\n      } else {\n        text = cap[1];\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  url(src: string): Tokens.Link | undefined {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = cap[0];\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])?.[0] ?? '';\n        } while (prevCapZero !== cap[0]);\n        text = cap[0];\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text,\n          },\n        ],\n      };\n    }\n  }\n\n  inlineText(src: string): Tokens.Text | undefined {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      const escaped = this.lexer.state.inRawBlock;\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        escaped,\n      };\n    }\n  }\n}\n","import { _Tokenizer } from './Tokenizer.ts';\nimport { _defaults } from './defaults.ts';\nimport { other, block, inline } from './rules.ts';\nimport type { Token, TokensList, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Block Lexer\n */\nexport class _Lexer {\n  tokens: TokensList;\n  options: MarkedOptions;\n  state: {\n    inLink: boolean;\n    inRawBlock: boolean;\n    top: boolean;\n  };\n\n  private tokenizer: _Tokenizer;\n  private inlineQueue: { src: string, tokens: Token[] }[];\n\n  constructor(options?: MarkedOptions) {\n    // TokenList cannot be created in one go\n    this.tokens = [] as unknown as TokensList;\n    this.tokens.links = Object.create(null);\n    this.options = options || _defaults;\n    this.options.tokenizer = this.options.tokenizer || new _Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true,\n    };\n\n    const rules = {\n      other,\n      block: block.normal,\n      inline: inline.normal,\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline,\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src: string, options?: MarkedOptions) {\n    const lexer = new _Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src: string) {\n    src = src.replace(other.carriageReturn, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    for (let i = 0; i < this.inlineQueue.length; i++) {\n      const next = this.inlineQueue[i];\n      this.inlineTokens(next.src, next.tokens);\n    }\n    this.inlineQueue = [];\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src: string, tokens?: Token[], lastParagraphClipped?: boolean): Token[];\n  blockTokens(src: string, tokens?: TokensList, lastParagraphClipped?: boolean): TokensList;\n  blockTokens(src: string, tokens: Token[] = [], lastParagraphClipped = false) {\n    if (this.options.pedantic) {\n      src = src.replace(other.tabCharGlobal, '    ').replace(other.spaceLine, '');\n    }\n\n    while (src) {\n      let token: Tokens.Generic | undefined;\n\n      if (this.options.extensions?.block?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.raw.length === 1 && lastToken !== undefined) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unnecessary paragraph tags\n          lastToken.raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'paragraph' || lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title,\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        const lastToken = tokens.at(-1);\n        if (lastParagraphClipped && lastToken?.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = cutSrc.length !== src.length;\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue.at(-1)!.src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src: string, tokens: Token[] = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src: string, tokens: Token[] = []): Token[] {\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match: RegExpExecArray | null = null;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index)\n              + '[' + 'a'.repeat(match[0].length - 2) + ']'\n              + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n\n    // Mask out escaped characters\n    while ((match = this.tokenizer.rules.inline.anyPunctuation.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);\n    }\n\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + 'a'.repeat(match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    let keepPrevChar = false;\n    let prevChar = '';\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      let token: Tokens.Generic | undefined;\n\n      // extensions\n      if (this.options.extensions?.inline?.some((extTokenizer) => {\n        if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n          src = src.substring(token.raw.length);\n          tokens.push(token);\n          return true;\n        }\n        return false;\n      })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        const lastToken = tokens.at(-1);\n        if (token.type === 'text' && lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      let cutSrc = src;\n      if (this.options.extensions?.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach((getStartIndex) => {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) {\n            startIndex = Math.min(startIndex, tempStart);\n          }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        const lastToken = tokens.at(-1);\n        if (lastToken?.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport {\n  cleanUrl,\n  escape,\n} from './helpers.ts';\nimport { other } from './rules.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Tokens } from './Tokens.ts';\nimport type { _Parser } from './Parser.ts';\n\n/**\n * Renderer\n */\nexport class _Renderer {\n  options: MarkedOptions;\n  parser!: _Parser; // set by the parser\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  space(token: Tokens.Space): string {\n    return '';\n  }\n\n  code({ text, lang, escaped }: Tokens.Code): string {\n    const langString = (lang || '').match(other.notSpaceStart)?.[0];\n\n    const code = text.replace(other.endingNewline, '') + '\\n';\n\n    if (!langString) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"language-'\n      + escape(langString)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  blockquote({ tokens }: Tokens.Blockquote): string {\n    const body = this.parser.parse(tokens);\n    return `<blockquote>\\n${body}</blockquote>\\n`;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) : string {\n    return text;\n  }\n\n  heading({ tokens, depth }: Tokens.Heading): string {\n    return `<h${depth}>${this.parser.parseInline(tokens)}</h${depth}>\\n`;\n  }\n\n  hr(token: Tokens.Hr): string {\n    return '<hr>\\n';\n  }\n\n  list(token: Tokens.List): string {\n    const ordered = token.ordered;\n    const start = token.start;\n\n    let body = '';\n    for (let j = 0; j < token.items.length; j++) {\n      const item = token.items[j];\n      body += this.listitem(item);\n    }\n\n    const type = ordered ? 'ol' : 'ul';\n    const startAttr = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startAttr + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  listitem(item: Tokens.ListItem): string {\n    let itemBody = '';\n    if (item.task) {\n      const checkbox = this.checkbox({ checked: !!item.checked });\n      if (item.loose) {\n        if (item.tokens[0]?.type === 'paragraph') {\n          item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n          if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n            item.tokens[0].tokens[0].text = checkbox + ' ' + escape(item.tokens[0].tokens[0].text);\n            item.tokens[0].tokens[0].escaped = true;\n          }\n        } else {\n          item.tokens.unshift({\n            type: 'text',\n            raw: checkbox + ' ',\n            text: checkbox + ' ',\n            escaped: true,\n          });\n        }\n      } else {\n        itemBody += checkbox + ' ';\n      }\n    }\n\n    itemBody += this.parser.parse(item.tokens, !!item.loose);\n\n    return `<li>${itemBody}</li>\\n`;\n  }\n\n  checkbox({ checked }: Tokens.Checkbox): string {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\">';\n  }\n\n  paragraph({ tokens }: Tokens.Paragraph): string {\n    return `<p>${this.parser.parseInline(tokens)}</p>\\n`;\n  }\n\n  table(token: Tokens.Table): string {\n    let header = '';\n\n    // header\n    let cell = '';\n    for (let j = 0; j < token.header.length; j++) {\n      cell += this.tablecell(token.header[j]);\n    }\n    header += this.tablerow({ text: cell });\n\n    let body = '';\n    for (let j = 0; j < token.rows.length; j++) {\n      const row = token.rows[j];\n\n      cell = '';\n      for (let k = 0; k < row.length; k++) {\n        cell += this.tablecell(row[k]);\n      }\n\n      body += this.tablerow({ text: cell });\n    }\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  tablerow({ text }: Tokens.TableRow): string {\n    return `<tr>\\n${text}</tr>\\n`;\n  }\n\n  tablecell(token: Tokens.TableCell): string {\n    const content = this.parser.parseInline(token.tokens);\n    const type = token.header ? 'th' : 'td';\n    const tag = token.align\n      ? `<${type} align=\"${token.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   */\n  strong({ tokens }: Tokens.Strong): string {\n    return `<strong>${this.parser.parseInline(tokens)}</strong>`;\n  }\n\n  em({ tokens }: Tokens.Em): string {\n    return `<em>${this.parser.parseInline(tokens)}</em>`;\n  }\n\n  codespan({ text }: Tokens.Codespan): string {\n    return `<code>${escape(text, true)}</code>`;\n  }\n\n  br(token: Tokens.Br): string {\n    return '<br>';\n  }\n\n  del({ tokens }: Tokens.Del): string {\n    return `<del>${this.parser.parseInline(tokens)}</del>`;\n  }\n\n  link({ href, title, tokens }: Tokens.Link): string {\n    const text = this.parser.parseInline(tokens);\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return text;\n    }\n    href = cleanHref;\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + (escape(title)) + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  image({ href, title, text, tokens }: Tokens.Image): string {\n    if (tokens) {\n      text = this.parser.parseInline(tokens, this.parser.textRenderer);\n    }\n    const cleanHref = cleanUrl(href);\n    if (cleanHref === null) {\n      return escape(text);\n    }\n    href = cleanHref;\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${escape(title)}\"`;\n    }\n    out += '>';\n    return out;\n  }\n\n  text(token: Tokens.Text | Tokens.Escape) : string {\n    return 'tokens' in token && token.tokens\n      ? this.parser.parseInline(token.tokens)\n      : ('escaped' in token && token.escaped ? token.text : escape(token.text));\n  }\n}\n","import type { Tokens } from './Tokens.ts';\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nexport class _TextRenderer {\n  // no need for block level renderers\n  strong({ text }: Tokens.Strong) {\n    return text;\n  }\n\n  em({ text }: Tokens.Em) {\n    return text;\n  }\n\n  codespan({ text }: Tokens.Codespan) {\n    return text;\n  }\n\n  del({ text }: Tokens.Del) {\n    return text;\n  }\n\n  html({ text }: Tokens.HTML | Tokens.Tag) {\n    return text;\n  }\n\n  text({ text }: Tokens.Text | Tokens.Escape | Tokens.Tag) {\n    return text;\n  }\n\n  link({ text }: Tokens.Link) {\n    return '' + text;\n  }\n\n  image({ text }: Tokens.Image) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n","import { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _defaults } from './defaults.ts';\nimport type { MarkedToken, Token, Tokens } from './Tokens.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\n\n/**\n * Parsing & Compiling\n */\nexport class _Parser {\n  options: MarkedOptions;\n  renderer: _Renderer;\n  textRenderer: _TextRenderer;\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n    this.options.renderer = this.options.renderer || new _Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.renderer.parser = this;\n    this.textRenderer = new _TextRenderer();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens: Token[], options?: MarkedOptions) {\n    const parser = new _Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens: Token[], top = true): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const genericToken = anyToken as Tokens.Generic;\n        const ret = this.options.extensions.renderers[genericToken.type].call({ parser: this }, genericToken);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(genericToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'space': {\n          out += this.renderer.space(token);\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr(token);\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(token);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token);\n          continue;\n        }\n        case 'table': {\n          out += this.renderer.table(token);\n          continue;\n        }\n        case 'blockquote': {\n          out += this.renderer.blockquote(token);\n          continue;\n        }\n        case 'list': {\n          out += this.renderer.list(token);\n          continue;\n        }\n        case 'html': {\n          out += this.renderer.html(token);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(token);\n          continue;\n        }\n        case 'text': {\n          let textToken = token;\n          let body = this.renderer.text(textToken);\n          while (i + 1 < tokens.length && tokens[i + 1].type === 'text') {\n            textToken = tokens[++i] as Tokens.Text;\n            body += '\\n' + this.renderer.text(textToken);\n          }\n          if (top) {\n            out += this.renderer.paragraph({\n              type: 'paragraph',\n              raw: body,\n              text: body,\n              tokens: [{ type: 'text', raw: body, text: body, escaped: true }],\n            });\n          } else {\n            out += body;\n          }\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens: Token[], renderer: _Renderer | _TextRenderer = this.renderer): string {\n    let out = '';\n\n    for (let i = 0; i < tokens.length; i++) {\n      const anyToken = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions?.renderers?.[anyToken.type]) {\n        const ret = this.options.extensions.renderers[anyToken.type].call({ parser: this }, anyToken);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(anyToken.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      const token = anyToken as MarkedToken;\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token);\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(token);\n          break;\n        }\n        case 'em': {\n          out += renderer.em(token);\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token);\n          break;\n        }\n        case 'br': {\n          out += renderer.br(token);\n          break;\n        }\n        case 'del': {\n          out += renderer.del(token);\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return '';\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n","import { _defaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport type { MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\n\nexport class _Hooks {\n  options: MarkedOptions;\n  block?: boolean;\n\n  constructor(options?: MarkedOptions) {\n    this.options = options || _defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess',\n    'processAllTokens',\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown: string) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html: string) {\n    return html;\n  }\n\n  /**\n   * Process all tokens before walk tokens\n   */\n  processAllTokens(tokens: Token[] | TokensList) {\n    return tokens;\n  }\n\n  /**\n   * Provide function to tokenize markdown\n   */\n  provideLexer() {\n    return this.block ? _Lexer.lex : _Lexer.lexInline;\n  }\n\n  /**\n   * Provide function to parse tokens\n   */\n  provideParser() {\n    return this.block ? _Parser.parse : _Parser.parseInline;\n  }\n}\n","import { _getDefaults } from './defaults.ts';\nimport { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { escape } from './helpers.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, Tokens, TokensList } from './Tokens.ts';\n\nexport type MaybePromise = void | Promise<void>;\n\ntype UnknownFunction = (...args: unknown[]) => unknown;\ntype GenericRendererFunction = (...args: unknown[]) => string | false;\n\nexport class Marked {\n  defaults = _getDefaults();\n  options = this.setOptions;\n\n  parse = this.parseMarkdown(true);\n  parseInline = this.parseMarkdown(false);\n\n  Parser = _Parser;\n  Renderer = _Renderer;\n  TextRenderer = _TextRenderer;\n  Lexer = _Lexer;\n  Tokenizer = _Tokenizer;\n  Hooks = _Hooks;\n\n  constructor(...args: MarkedExtension[]) {\n    this.use(...args);\n  }\n\n  /**\n   * Run callback for every token\n   */\n  walkTokens(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n    let values: MaybePromise[] = [];\n    for (const token of tokens) {\n      values = values.concat(callback.call(this, token));\n      switch (token.type) {\n        case 'table': {\n          const tableToken = token as Tokens.Table;\n          for (const cell of tableToken.header) {\n            values = values.concat(this.walkTokens(cell.tokens, callback));\n          }\n          for (const row of tableToken.rows) {\n            for (const cell of row) {\n              values = values.concat(this.walkTokens(cell.tokens, callback));\n            }\n          }\n          break;\n        }\n        case 'list': {\n          const listToken = token as Tokens.List;\n          values = values.concat(this.walkTokens(listToken.items, callback));\n          break;\n        }\n        default: {\n          const genericToken = token as Tokens.Generic;\n          if (this.defaults.extensions?.childTokens?.[genericToken.type]) {\n            this.defaults.extensions.childTokens[genericToken.type].forEach((childTokens) => {\n              const tokens = genericToken[childTokens].flat(Infinity) as Token[] | TokensList;\n              values = values.concat(this.walkTokens(tokens, callback));\n            });\n          } else if (genericToken.tokens) {\n            values = values.concat(this.walkTokens(genericToken.tokens, callback));\n          }\n        }\n      }\n    }\n    return values;\n  }\n\n  use(...args: MarkedExtension[]) {\n    const extensions: MarkedOptions['extensions'] = this.defaults.extensions || { renderers: {}, childTokens: {} };\n\n    args.forEach((pack) => {\n      // copy options to new object\n      const opts = { ...pack } as MarkedOptions;\n\n      // set async to true if it was set to true before\n      opts.async = this.defaults.async || opts.async || false;\n\n      // ==-- Parse \"addon\" extensions --== //\n      if (pack.extensions) {\n        pack.extensions.forEach((ext) => {\n          if (!ext.name) {\n            throw new Error('extension name required');\n          }\n          if ('renderer' in ext) { // Renderer extensions\n            const prevRenderer = extensions.renderers[ext.name];\n            if (prevRenderer) {\n              // Replace extension with func to run new extension but fall back if false\n              extensions.renderers[ext.name] = function(...args) {\n                let ret = ext.renderer.apply(this, args);\n                if (ret === false) {\n                  ret = prevRenderer.apply(this, args);\n                }\n                return ret;\n              };\n            } else {\n              extensions.renderers[ext.name] = ext.renderer;\n            }\n          }\n          if ('tokenizer' in ext) { // Tokenizer Extensions\n            if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n              throw new Error(\"extension level must be 'block' or 'inline'\");\n            }\n            const extLevel = extensions[ext.level];\n            if (extLevel) {\n              extLevel.unshift(ext.tokenizer);\n            } else {\n              extensions[ext.level] = [ext.tokenizer];\n            }\n            if (ext.start) { // Function to check for start of token\n              if (ext.level === 'block') {\n                if (extensions.startBlock) {\n                  extensions.startBlock.push(ext.start);\n                } else {\n                  extensions.startBlock = [ext.start];\n                }\n              } else if (ext.level === 'inline') {\n                if (extensions.startInline) {\n                  extensions.startInline.push(ext.start);\n                } else {\n                  extensions.startInline = [ext.start];\n                }\n              }\n            }\n          }\n          if ('childTokens' in ext && ext.childTokens) { // Child tokens to be visited by walkTokens\n            extensions.childTokens[ext.name] = ext.childTokens;\n          }\n        });\n        opts.extensions = extensions;\n      }\n\n      // ==-- Parse \"overwrite\" extensions --== //\n      if (pack.renderer) {\n        const renderer = this.defaults.renderer || new _Renderer(this.defaults);\n        for (const prop in pack.renderer) {\n          if (!(prop in renderer)) {\n            throw new Error(`renderer '${prop}' does not exist`);\n          }\n          if (['options', 'parser'].includes(prop)) {\n            // ignore options property\n            continue;\n          }\n          const rendererProp = prop as Exclude<keyof _Renderer, 'options' | 'parser'>;\n          const rendererFunc = pack.renderer[rendererProp] as GenericRendererFunction;\n          const prevRenderer = renderer[rendererProp] as GenericRendererFunction;\n          // Replace renderer with func to run extension, but fall back if false\n          renderer[rendererProp] = (...args: unknown[]) => {\n            let ret = rendererFunc.apply(renderer, args);\n            if (ret === false) {\n              ret = prevRenderer.apply(renderer, args);\n            }\n            return ret || '';\n          };\n        }\n        opts.renderer = renderer;\n      }\n      if (pack.tokenizer) {\n        const tokenizer = this.defaults.tokenizer || new _Tokenizer(this.defaults);\n        for (const prop in pack.tokenizer) {\n          if (!(prop in tokenizer)) {\n            throw new Error(`tokenizer '${prop}' does not exist`);\n          }\n          if (['options', 'rules', 'lexer'].includes(prop)) {\n            // ignore options, rules, and lexer properties\n            continue;\n          }\n          const tokenizerProp = prop as Exclude<keyof _Tokenizer, 'options' | 'rules' | 'lexer'>;\n          const tokenizerFunc = pack.tokenizer[tokenizerProp] as UnknownFunction;\n          const prevTokenizer = tokenizer[tokenizerProp] as UnknownFunction;\n          // Replace tokenizer with func to run extension, but fall back if false\n          // @ts-expect-error cannot type tokenizer function dynamically\n          tokenizer[tokenizerProp] = (...args: unknown[]) => {\n            let ret = tokenizerFunc.apply(tokenizer, args);\n            if (ret === false) {\n              ret = prevTokenizer.apply(tokenizer, args);\n            }\n            return ret;\n          };\n        }\n        opts.tokenizer = tokenizer;\n      }\n\n      // ==-- Parse Hooks extensions --== //\n      if (pack.hooks) {\n        const hooks = this.defaults.hooks || new _Hooks();\n        for (const prop in pack.hooks) {\n          if (!(prop in hooks)) {\n            throw new Error(`hook '${prop}' does not exist`);\n          }\n          if (['options', 'block'].includes(prop)) {\n            // ignore options and block properties\n            continue;\n          }\n          const hooksProp = prop as Exclude<keyof _Hooks, 'options' | 'block'>;\n          const hooksFunc = pack.hooks[hooksProp] as UnknownFunction;\n          const prevHook = hooks[hooksProp] as UnknownFunction;\n          if (_Hooks.passThroughHooks.has(prop)) {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (arg: unknown) => {\n              if (this.defaults.async) {\n                return Promise.resolve(hooksFunc.call(hooks, arg)).then(ret => {\n                  return prevHook.call(hooks, ret);\n                });\n              }\n\n              const ret = hooksFunc.call(hooks, arg);\n              return prevHook.call(hooks, ret);\n            };\n          } else {\n            // @ts-expect-error cannot type hook function dynamically\n            hooks[hooksProp] = (...args: unknown[]) => {\n              let ret = hooksFunc.apply(hooks, args);\n              if (ret === false) {\n                ret = prevHook.apply(hooks, args);\n              }\n              return ret;\n            };\n          }\n        }\n        opts.hooks = hooks;\n      }\n\n      // ==-- Parse WalkTokens extensions --== //\n      if (pack.walkTokens) {\n        const walkTokens = this.defaults.walkTokens;\n        const packWalktokens = pack.walkTokens;\n        opts.walkTokens = function(token) {\n          let values: MaybePromise[] = [];\n          values.push(packWalktokens.call(this, token));\n          if (walkTokens) {\n            values = values.concat(walkTokens.call(this, token));\n          }\n          return values;\n        };\n      }\n\n      this.defaults = { ...this.defaults, ...opts };\n    });\n\n    return this;\n  }\n\n  setOptions(opt: MarkedOptions) {\n    this.defaults = { ...this.defaults, ...opt };\n    return this;\n  }\n\n  lexer(src: string, options?: MarkedOptions) {\n    return _Lexer.lex(src, options ?? this.defaults);\n  }\n\n  parser(tokens: Token[], options?: MarkedOptions) {\n    return _Parser.parse(tokens, options ?? this.defaults);\n  }\n\n  private parseMarkdown(blockType: boolean) {\n    type overloadedParse = {\n      (src: string, options: MarkedOptions & { async: true }): Promise<string>;\n      (src: string, options: MarkedOptions & { async: false }): string;\n      (src: string, options?: MarkedOptions | null): string | Promise<string>;\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const parse: overloadedParse = (src: string, options?: MarkedOptions | null): any => {\n      const origOpt = { ...options };\n      const opt = { ...this.defaults, ...origOpt };\n\n      const throwError = this.onError(!!opt.silent, !!opt.async);\n\n      // throw error if an extension set async to true but parse was called with async: false\n      if (this.defaults.async === true && origOpt.async === false) {\n        return throwError(new Error('marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise.'));\n      }\n\n      // throw error in case of non string input\n      if (typeof src === 'undefined' || src === null) {\n        return throwError(new Error('marked(): input parameter is undefined or null'));\n      }\n      if (typeof src !== 'string') {\n        return throwError(new Error('marked(): input parameter is of type '\n          + Object.prototype.toString.call(src) + ', string expected'));\n      }\n\n      if (opt.hooks) {\n        opt.hooks.options = opt;\n        opt.hooks.block = blockType;\n      }\n\n      const lexer = opt.hooks ? opt.hooks.provideLexer() : (blockType ? _Lexer.lex : _Lexer.lexInline);\n      const parser = opt.hooks ? opt.hooks.provideParser() : (blockType ? _Parser.parse : _Parser.parseInline);\n\n      if (opt.async) {\n        return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n          .then(src => lexer(src, opt))\n          .then(tokens => opt.hooks ? opt.hooks.processAllTokens(tokens) : tokens)\n          .then(tokens => opt.walkTokens ? Promise.all(this.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n          .then(tokens => parser(tokens, opt))\n          .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n          .catch(throwError);\n      }\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src) as string;\n        }\n        let tokens = lexer(src, opt);\n        if (opt.hooks) {\n          tokens = opt.hooks.processAllTokens(tokens);\n        }\n        if (opt.walkTokens) {\n          this.walkTokens(tokens, opt.walkTokens);\n        }\n        let html = parser(tokens, opt);\n        if (opt.hooks) {\n          html = opt.hooks.postprocess(html) as string;\n        }\n        return html;\n      } catch(e) {\n        return throwError(e as Error);\n      }\n    };\n\n    return parse;\n  }\n\n  private onError(silent: boolean, async: boolean) {\n    return (e: Error): string | Promise<string> => {\n      e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n      if (silent) {\n        const msg = '<p>An error occurred:</p><pre>'\n          + escape(e.message + '', true)\n          + '</pre>';\n        if (async) {\n          return Promise.resolve(msg);\n        }\n        return msg;\n      }\n\n      if (async) {\n        return Promise.reject(e);\n      }\n      throw e;\n    };\n  }\n}\n","import { _Lexer } from './Lexer.ts';\nimport { _Parser } from './Parser.ts';\nimport { _Tokenizer } from './Tokenizer.ts';\nimport { _Renderer } from './Renderer.ts';\nimport { _TextRenderer } from './TextRenderer.ts';\nimport { _Hooks } from './Hooks.ts';\nimport { Marked } from './Instance.ts';\nimport {\n  _getDefaults,\n  changeDefaults,\n  _defaults,\n} from './defaults.ts';\nimport type { MarkedExtension, MarkedOptions } from './MarkedOptions.ts';\nimport type { Token, TokensList } from './Tokens.ts';\nimport type { MaybePromise } from './Instance.ts';\n\nconst markedInstance = new Marked();\n\n/**\n * Compiles markdown to HTML asynchronously.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options, having async: true\n * @return Promise of string of compiled HTML\n */\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\n\n/**\n * Compiles markdown to HTML.\n *\n * @param src String of markdown source to be compiled\n * @param options Optional hash of options\n * @return String of compiled HTML. Will be a Promise of string if async is set to true by any extensions.\n */\nexport function marked(src: string, options: MarkedOptions & { async: false }): string;\nexport function marked(src: string, options: MarkedOptions & { async: true }): Promise<string>;\nexport function marked(src: string, options?: MarkedOptions | null): string | Promise<string>;\nexport function marked(src: string, opt?: MarkedOptions | null): string | Promise<string> {\n  return markedInstance.parse(src, opt);\n}\n\n/**\n * Sets the default options.\n *\n * @param options Hash of options\n */\nmarked.options =\nmarked.setOptions = function(options: MarkedOptions) {\n  markedInstance.setOptions(options);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Gets the original marked default options.\n */\nmarked.getDefaults = _getDefaults;\n\nmarked.defaults = _defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args: MarkedExtension[]) {\n  markedInstance.use(...args);\n  marked.defaults = markedInstance.defaults;\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens: Token[] | TokensList, callback: (token: Token) => MaybePromise | MaybePromise[]) {\n  return markedInstance.walkTokens(tokens, callback);\n};\n\n/**\n * Compiles markdown to HTML without enclosing `p` tag.\n *\n * @param src String of markdown source to be compiled\n * @param options Hash of options\n * @return String of compiled HTML\n */\nmarked.parseInline = markedInstance.parseInline;\n\n/**\n * Expose\n */\nmarked.Parser = _Parser;\nmarked.parser = _Parser.parse;\nmarked.Renderer = _Renderer;\nmarked.TextRenderer = _TextRenderer;\nmarked.Lexer = _Lexer;\nmarked.lexer = _Lexer.lex;\nmarked.Tokenizer = _Tokenizer;\nmarked.Hooks = _Hooks;\nmarked.parse = marked;\n\nexport const options = marked.options;\nexport const setOptions = marked.setOptions;\nexport const use = marked.use;\nexport const walkTokens = marked.walkTokens;\nexport const parseInline = marked.parseInline;\nexport const parse = marked;\nexport const parser = _Parser.parse;\nexport const lexer = _Lexer.lex;\nexport { _defaults as defaults, _getDefaults as getDefaults } from './defaults.ts';\nexport { _Lexer as Lexer } from './Lexer.ts';\nexport { _Parser as Parser } from './Parser.ts';\nexport { _Tokenizer as Tokenizer } from './Tokenizer.ts';\nexport { _Renderer as Renderer } from './Renderer.ts';\nexport { _TextRenderer as TextRenderer } from './TextRenderer.ts';\nexport { _Hooks as Hooks } from './Hooks.ts';\nexport { Marked } from './Instance.ts';\nexport type * from './MarkedOptions.ts';\nexport type * from './Tokens.ts';\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}