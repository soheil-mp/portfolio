{"ast":null,"code":"import { getAllBlogFiles } from '../utils/markdownParser';\n\n// Get all blog metadata\nexport const getBlogMetadata = async () => {\n  try {\n    return await getAllBlogFiles();\n  } catch (error) {\n    console.error('Error loading blog metadata:', error);\n    return [];\n  }\n};\n\n// Get metadata for a specific blog post\nexport const getBlogPost = async slug => {\n  try {\n    const allBlogs = await getAllBlogFiles();\n    return allBlogs.find(blog => blog.filename === slug) || null;\n  } catch (error) {\n    console.error('Error loading blog post:', error);\n    return null;\n  }\n};","map":{"version":3,"names":["getAllBlogFiles","getBlogMetadata","error","console","getBlogPost","slug","allBlogs","find","blog","filename"],"sources":["C:/Users/Soheil/Desktop/Codebase/GitHub/quant-blog/src/data/blogData.js"],"sourcesContent":["import { getAllBlogFiles } from '../utils/markdownParser';\r\n\r\n// Get all blog metadata\r\nexport const getBlogMetadata = async () => {\r\n  try {\r\n    return await getAllBlogFiles();\r\n  } catch (error) {\r\n    console.error('Error loading blog metadata:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n// Get metadata for a specific blog post\r\nexport const getBlogPost = async (slug) => {\r\n  try {\r\n    const allBlogs = await getAllBlogFiles();\r\n    return allBlogs.find(blog => blog.filename === slug) || null;\r\n  } catch (error) {\r\n    console.error('Error loading blog post:', error);\r\n    return null;\r\n  }\r\n}; "],"mappings":"AAAA,SAASA,eAAe,QAAQ,yBAAyB;;AAEzD;AACA,OAAO,MAAMC,eAAe,GAAG,MAAAA,CAAA,KAAY;EACzC,IAAI;IACF,OAAO,MAAMD,eAAe,CAAC,CAAC;EAChC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACpD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA,OAAO,MAAME,WAAW,GAAG,MAAOC,IAAI,IAAK;EACzC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMN,eAAe,CAAC,CAAC;IACxC,OAAOM,QAAQ,CAACC,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACC,QAAQ,KAAKJ,IAAI,CAAC,IAAI,IAAI;EAC9D,CAAC,CAAC,OAAOH,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}